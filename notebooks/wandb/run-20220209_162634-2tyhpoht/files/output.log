Overriding model.yaml nc=80 with nc=3
                 from  n    params  module                                  arguments
  0                -1  1      3520  models.common.Conv                      [3, 32, 6, 2, 2]
  1                -1  1     18560  models.common.Conv                      [32, 64, 3, 2]
  2                -1  1     18816  models.common.C3                        [64, 64, 1]
  3                -1  1     73984  models.common.Conv                      [64, 128, 3, 2]
  4                -1  2    115712  models.common.C3                        [128, 128, 2]
  5                -1  1    295424  models.common.Conv                      [128, 256, 3, 2]
  6                -1  3    625152  models.common.C3                        [256, 256, 3]
  7                -1  1   1180672  models.common.Conv                      [256, 512, 3, 2]
  8                -1  1   1182720  models.common.C3                        [512, 512, 1]
  9                -1  1    656896  models.common.SPPF                      [512, 512, 5]
 10                -1  1    131584  models.common.Conv                      [512, 256, 1, 1]
 11                -1  1         0  torch.nn.modules.upsampling.Upsample    [None, 2, 'nearest']
 12           [-1, 6]  1         0  models.common.Concat                    [1]
 13                -1  1    361984  models.common.C3                        [512, 256, 1, False]
 14                -1  1     33024  models.common.Conv                      [256, 128, 1, 1]
 15                -1  1         0  torch.nn.modules.upsampling.Upsample    [None, 2, 'nearest']
 16           [-1, 4]  1         0  models.common.Concat                    [1]
 17                -1  1     90880  models.common.C3                        [256, 128, 1, False]
 18                -1  1    147712  models.common.Conv                      [128, 128, 3, 2]
 19          [-1, 14]  1         0  models.common.Concat                    [1]
 20                -1  1    296448  models.common.C3                        [256, 256, 1, False]
 21                -1  1    590336  models.common.Conv                      [256, 256, 3, 2]
 22          [-1, 10]  1         0  models.common.Concat                    [1]
 23                -1  1   1182720  models.common.C3                        [512, 512, 1, False]
 24      [17, 20, 23]  1     21576  models.yolo.Detect                      [3, [[10, 13, 16, 30, 33, 23], [30, 61, 62, 45, 59, 119], [116, 90, 156, 198, 373, 326]], [128, 256, 512]]
C:\Users\rb01243\Anaconda3\lib\site-packages\torch\functional.py:445: UserWarning: torch.meshgrid: in an upcoming release, it will be required to pass the indexing argument. (Triggered internally at  ..\aten\src\ATen\native\TensorShape.cpp:2157.)
  return _VF.meshgrid(tensors, **kwargs)  # type: ignore[attr-defined]
Model Summary: 270 layers, 7027720 parameters, 7027720 gradients, 15.9 GFLOPs
Transferred 344/350 items from yolov5s.pt
Scaled weight_decay = 0.00046875
[34m[1moptimizer:[39m[22m SGD with parameter groups 57 weight, 60 weight (no decay), 60 bias
[34m[1mtrain: [39m[22mScanning '..\data\datasets\All_Volunteers_Crowdsourced\labels\train.cache' images and labels... 1751 found, 0 missing, 0 empty, 1 corrupted: 100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 1751/1751 [00:00<?, ?it/s]
[34m[1mtrain: [39m[22mWARNING: Ignoring corrupted image and/or label ..\data\datasets\All_Volunteers_Crowdsourced\images\train\Unknown-X-20200130-084742-XLGSYPPPTEXC-0.JPG: non-normalized or out of bounds coordinate labels
[34m[1mval: [39m[22mScanning '..\data\datasets\All_Volunteers_IID\labels\val.cache' images and labels... 947 found, 0 missing, 0 empty, 1 corrupted: 100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 947/947 [00:00<?, ?it/s]
[34m[1mval: [39m[22mWARNING: Ignoring corrupted image and/or label ..\data\datasets\All_Volunteers_IID\images\val\IX20191022_101649_0368_00003706.1a309d95dd140892a121.JPG: non-normalized or out of bounds coordinate labels
Plotting labels...
[34m[1mautoanchor: [39m[22mAnalyzing anchors... anchors/target = 5.18, Best Possible Recall (BPR) = 0.9986
Image sizes 640 train, 640 val
Using 8 dataloader workers
Logging results to [1mruns\train\LargeDS_cyolo2
Starting training for 10 epochs...
     Epoch   gpu_mem       box       obj       cls    labels  img_size
YOLO+BCC
  0%|          | 0/88 [00:00<?, ?it/s]
target_volunteers_bcc:  tensor([[[2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.],
         ...,
         [2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.]],
        [[2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.],
         ...,
         [2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.]],
        [[2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.],
         ...,
         [2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.]],
        ...,
        [[2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.],
         ...,
         [2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.]],
        [[2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.],
         ...,
         [2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.]],
        [[2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.],
         ...,
         [2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.]]])
target_volunteers_bcc size:  torch.Size([20, 25200, 596])
batch_pred_bcc:  tensor([[[-8.30915e+00, -8.19969e+00, -1.07627e+01, -4.88401e-04],
         [-8.24457e+00, -7.91964e+00, -9.78769e+00, -4.88401e-04],
         [-7.67664e+00, -7.73592e+00, -8.99634e+00, -9.77040e-04],
         ...,
         [-4.86581e+00, -4.89549e+00, -4.59693e+00, -2.57185e-02],
         [-4.75991e+00, -4.64342e+00, -4.45463e+00, -3.02377e-02],
         [-4.53787e+00, -4.76981e+00, -4.55346e+00, -3.02377e-02]],
        [[-8.18583e+00, -8.07321e+00, -1.07509e+01, -4.88401e-04],
         [-8.15141e+00, -7.80892e+00, -9.80524e+00, -9.77040e-04],
         [-7.52729e+00, -7.55039e+00, -8.96354e+00, -9.77040e-04],
         ...,
         [-4.88584e+00, -4.92415e+00, -4.58360e+00, -2.52177e-02],
         [-4.76691e+00, -4.51664e+00, -4.37802e+00, -3.27573e-02],
         [-4.52829e+00, -4.68749e+00, -4.40488e+00, -3.27573e-02]],
        [[-8.09428e+00, -8.06648e+00, -1.08544e+01, -4.88401e-04],
         [-8.03867e+00, -7.79570e+00, -9.88151e+00, -9.77040e-04],
         [-7.58628e+00, -7.71912e+00, -9.19802e+00, -9.77040e-04],
         ...,
         [-4.91851e+00, -4.94603e+00, -4.62442e+00, -2.47170e-02],
         [-4.89437e+00, -4.76543e+00, -4.50431e+00, -2.72227e-02],
         [-4.58548e+00, -4.90307e+00, -4.52215e+00, -2.87291e-02]],
        ...,
        [[-8.16846e+00, -8.25007e+00, -1.08749e+01, -4.88401e-04],
         [-8.08417e+00, -8.04165e+00, -1.00186e+01, -4.88401e-04],
         [-7.61624e+00, -7.85216e+00, -9.33152e+00, -9.77040e-04],
         ...,
         [-4.93043e+00, -5.02791e+00, -4.64117e+00, -2.37165e-02],
         [-4.79179e+00, -4.71866e+00, -4.48079e+00, -2.87291e-02],
         [-4.61896e+00, -5.06824e+00, -4.70320e+00, -2.57185e-02]],
        [[-8.54217e+00, -8.57065e+00, -1.10961e+01, -4.88401e-04],
         [-8.46720e+00, -8.28554e+00, -1.01580e+01, -4.88401e-04],
         [-7.85480e+00, -7.93181e+00, -9.32830e+00, -9.77040e-04],
         ...,
         [-4.89421e+00, -4.82863e+00, -4.51664e+00, -2.67210e-02],
         [-4.78235e+00, -4.59708e+00, -4.42420e+00, -3.07411e-02],
         [-4.53194e+00, -4.73965e+00, -4.46901e+00, -3.12448e-02]],
        [[-8.75711e+00, -8.48897e+00, -1.11854e+01, -4.88401e-04],
         [-8.73472e+00, -8.20602e+00, -1.02516e+01, -4.88401e-04],
         [-8.10862e+00, -7.94900e+00, -9.45885e+00, -4.88401e-04],
         ...,
         [-4.84658e+00, -4.93430e+00, -4.73140e+00, -2.42167e-02],
         [-4.76933e+00, -4.57806e+00, -4.56169e+00, -2.97346e-02],
         [-4.52930e+00, -4.79260e+00, -4.73662e+00, -2.82267e-02]]], device='cuda:0', grad_fn=<LogBackward0>)
batch_pred_bcc.size():  torch.Size([20, 25200, 4])
batch_pcm['variational']:  tensor([[[1.10000, 1.10000, 1.10000,  ..., 1.10000, 1.10000, 1.10000],
         [1.00000, 1.00000, 1.00000,  ..., 1.00000, 1.00000, 1.00000],
         [1.00000, 1.00000, 1.00000,  ..., 1.00000, 1.00000, 1.00000],
         [1.00000, 1.00000, 1.00000,  ..., 1.00000, 1.00000, 1.00000]],
        [[1.00000, 1.00000, 1.00000,  ..., 1.00000, 1.00000, 1.00000],
         [1.10000, 1.10000, 1.10000,  ..., 1.10000, 1.10000, 1.10000],
         [1.00000, 1.00000, 1.00000,  ..., 1.00000, 1.00000, 1.00000],
         [1.00000, 1.00000, 1.00000,  ..., 1.00000, 1.00000, 1.00000]],
        [[1.00000, 1.00000, 1.00000,  ..., 1.00000, 1.00000, 1.00000],
         [1.00000, 1.00000, 1.00000,  ..., 1.00000, 1.00000, 1.00000],
         [1.10000, 1.10000, 1.10000,  ..., 1.10000, 1.10000, 1.10000],
         [1.00000, 1.00000, 1.00000,  ..., 1.00000, 1.00000, 1.00000]],
        [[1.00000, 1.00000, 1.00000,  ..., 1.00000, 1.00000, 1.00000],
         [1.00000, 1.00000, 1.00000,  ..., 1.00000, 1.00000, 1.00000],
         [1.00000, 1.00000, 1.00000,  ..., 1.00000, 1.00000, 1.00000],
         [1.10000, 1.10000, 1.10000,  ..., 1.10000, 1.10000, 1.10000]]], device='cuda:0', dtype=torch.float64)
batch_pcm['variational'].size():  torch.Size([4, 4, 596])
batch_pcm['prior']:  tensor([[[1.10000, 1.10000, 1.10000,  ..., 1.10000, 1.10000, 1.10000],
         [1.00000, 1.00000, 1.00000,  ..., 1.00000, 1.00000, 1.00000],
         [1.00000, 1.00000, 1.00000,  ..., 1.00000, 1.00000, 1.00000],
         [1.00000, 1.00000, 1.00000,  ..., 1.00000, 1.00000, 1.00000]],
        [[1.00000, 1.00000, 1.00000,  ..., 1.00000, 1.00000, 1.00000],
         [1.10000, 1.10000, 1.10000,  ..., 1.10000, 1.10000, 1.10000],
         [1.00000, 1.00000, 1.00000,  ..., 1.00000, 1.00000, 1.00000],
         [1.00000, 1.00000, 1.00000,  ..., 1.00000, 1.00000, 1.00000]],
        [[1.00000, 1.00000, 1.00000,  ..., 1.00000, 1.00000, 1.00000],
         [1.00000, 1.00000, 1.00000,  ..., 1.00000, 1.00000, 1.00000],
         [1.10000, 1.10000, 1.10000,  ..., 1.10000, 1.10000, 1.10000],
         [1.00000, 1.00000, 1.00000,  ..., 1.00000, 1.00000, 1.00000]],
        [[1.00000, 1.00000, 1.00000,  ..., 1.00000, 1.00000, 1.00000],
         [1.00000, 1.00000, 1.00000,  ..., 1.00000, 1.00000, 1.00000],
         [1.00000, 1.00000, 1.00000,  ..., 1.00000, 1.00000, 1.00000],
         [1.10000, 1.10000, 1.10000,  ..., 1.10000, 1.10000, 1.10000]]], device='cuda:0', dtype=torch.float64)
batch_pcm['prior'].size():  torch.Size([4, 4, 596])
batch_qtargets tensor([[[2.21381e-39, 2.46998e-39, 1.00000e+00, 8.98607e-36],
         [8.90647e-40, 1.23262e-39, 1.00000e+00, 3.38915e-36],
         [7.12430e-40, 6.71393e-40, 1.00000e+00, 1.53546e-36],
         ...,
         [1.45465e-40, 1.41213e-40, 1.00000e+00, 1.83985e-38],
         [1.40277e-40, 1.57603e-40, 1.00000e+00, 1.58867e-38],
         [1.93346e-40, 1.53323e-40, 1.00000e+00, 1.75367e-38]],
        [[2.47481e-39, 2.76997e-39, 1.00000e+00, 8.88030e-36],
         [9.94923e-40, 1.40135e-39, 1.00000e+00, 3.44756e-36],
         [8.00420e-40, 7.82164e-40, 1.00000e+00, 1.48586e-36],
         ...,
         [1.40697e-40, 1.35406e-40, 1.00000e+00, 1.81642e-38],
         [1.29016e-40, 1.65701e-40, 1.00000e+00, 1.46793e-38],
         [1.68248e-40, 1.43490e-40, 1.00000e+00, 1.50789e-38]],
        [[3.00787e-39, 3.09277e-39, 1.00000e+00, 9.84881e-36],
         [1.20201e-39, 1.53253e-39, 1.00000e+00, 3.72089e-36],
         [9.54010e-40, 8.35359e-40, 1.00000e+00, 1.87853e-36],
         ...,
         [1.41844e-40, 1.38001e-40, 1.00000e+00, 1.89305e-38],
         [1.28868e-40, 1.46597e-40, 1.00000e+00, 1.67469e-38],
         [1.78674e-40, 1.30052e-40, 1.00000e+00, 1.70231e-38]],
        ...,
        [[2.85093e-39, 2.62736e-39, 1.00000e+00, 1.00529e-35],
         [1.31726e-39, 1.37459e-39, 1.00000e+00, 4.26966e-36],
         [1.05793e-39, 8.35664e-40, 1.00000e+00, 2.14666e-36],
         ...,
         [1.42539e-40, 1.29292e-40, 1.00000e+00, 1.92709e-38],
         [1.39466e-40, 1.50064e-40, 1.00000e+00, 1.63340e-38],
         [2.07075e-40, 1.32141e-40, 1.00000e+00, 2.04625e-38]],
        [[2.44747e-39, 2.37884e-39, 1.00000e+00, 1.25416e-35],
         [1.03241e-39, 1.23820e-39, 1.00000e+00, 4.90836e-36],
         [8.30782e-40, 7.69192e-40, 1.00000e+00, 2.13986e-36],
         ...,
         [1.30482e-40, 1.39338e-40, 1.00000e+00, 1.69629e-38],
         [1.33048e-40, 1.60133e-40, 1.00000e+00, 1.54026e-38],
         [1.78740e-40, 1.45225e-40, 1.00000e+00, 1.61014e-38]],
        [[2.15857e-39, 2.82219e-39, 1.00000e+00, 1.37122e-35],
         [8.67576e-40, 1.47202e-39, 1.00000e+00, 5.38946e-36],
         [7.34416e-40, 8.61455e-40, 1.00000e+00, 2.43932e-36],
         ...,
         [1.69651e-40, 1.55396e-40, 1.00000e+00, 2.10811e-38],
         [1.54649e-40, 1.87249e-40, 1.00000e+00, 1.76904e-38],
         [2.34205e-40, 1.79987e-40, 1.00000e+00, 2.11056e-38]]], device='cuda:0')
batch_qtargets size torch.Size([20, 25200, 4])

  0%|          | 0/88 [00:28<?, ?it/s]