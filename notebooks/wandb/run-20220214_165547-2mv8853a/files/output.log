Overriding model.yaml nc=80 with nc=2
                 from  n    params  module                                  arguments
  0                -1  1      3520  models.common.Conv                      [3, 32, 6, 2, 2]
  1                -1  1     18560  models.common.Conv                      [32, 64, 3, 2]
  2                -1  1     18816  models.common.C3                        [64, 64, 1]
  3                -1  1     73984  models.common.Conv                      [64, 128, 3, 2]
  4                -1  2    115712  models.common.C3                        [128, 128, 2]
  5                -1  1    295424  models.common.Conv                      [128, 256, 3, 2]
  6                -1  3    625152  models.common.C3                        [256, 256, 3]
  7                -1  1   1180672  models.common.Conv                      [256, 512, 3, 2]
  8                -1  1   1182720  models.common.C3                        [512, 512, 1]
  9                -1  1    656896  models.common.SPPF                      [512, 512, 5]
 10                -1  1    131584  models.common.Conv                      [512, 256, 1, 1]
 11                -1  1         0  torch.nn.modules.upsampling.Upsample    [None, 2, 'nearest']
 12           [-1, 6]  1         0  models.common.Concat                    [1]
 13                -1  1    361984  models.common.C3                        [512, 256, 1, False]
 14                -1  1     33024  models.common.Conv                      [256, 128, 1, 1]
 15                -1  1         0  torch.nn.modules.upsampling.Upsample    [None, 2, 'nearest']
 16           [-1, 4]  1         0  models.common.Concat                    [1]
 17                -1  1     90880  models.common.C3                        [256, 128, 1, False]
 18                -1  1    147712  models.common.Conv                      [128, 128, 3, 2]
 19          [-1, 14]  1         0  models.common.Concat                    [1]
 20                -1  1    296448  models.common.C3                        [256, 256, 1, False]
 21                -1  1    590336  models.common.Conv                      [256, 256, 3, 2]
 22          [-1, 10]  1         0  models.common.Concat                    [1]
 23                -1  1   1182720  models.common.C3                        [512, 512, 1, False]
 24      [17, 20, 23]  1     18879  models.yolo.Detect                      [2, [[10, 13, 16, 30, 33, 23], [30, 61, 62, 45, 59, 119], [116, 90, 156, 198, 373, 326]], [128, 256, 512]]
C:\Users\rb01243\Anaconda3\lib\site-packages\torch\functional.py:445: UserWarning: torch.meshgrid: in an upcoming release, it will be required to pass the indexing argument. (Triggered internally at  ..\aten\src\ATen\native\TensorShape.cpp:2157.)
  return _VF.meshgrid(tensors, **kwargs)  # type: ignore[attr-defined]
Model Summary: 270 layers, 7025023 parameters, 7025023 gradients, 15.9 GFLOPs
Augmentation is:  False
Transferred 344/350 items from yolov5s.pt
Scaled weight_decay = 0.0005859375
[34m[1moptimizer:[39m[22m SGD with parameter groups 57 weight, 60 weight (no decay), 60 bias
[34m[1mtrain: [39m[22mScanning '..\data\datasets\All_Volunteers_Calc_Removed_Crowdsourced\labels\train.cache' images and labels... 1552 found, 0 missing, 0 empty, 1 corrupted: 100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 1552/1552 [00:00<?, ?it/s]
[34m[1mtrain: [39m[22mWARNING: Ignoring corrupted image and/or label ..\data\datasets\All_Volunteers_Calc_Removed_Crowdsourced\images\train\Unknown-X-20200130-084742-XLGSYPPPTEXC-0.JPG: non-normalized or out of bounds coordinate labels
[34m[1mval: [39m[22mScanning '..\data\datasets\All_Volunteers_Calc_Removed_Crowdsourced\labels\val.cache' images and labels... 388 found, 0 missing, 0 empty, 0 corrupted: 100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 388/388 [00:00<?, ?it/s]
Plotting labels...

[34m[1mautoanchor: [39m[22mAnalyzing anchors... anchors/target = 5.37, Best Possible Recall (BPR) = 0.9985
Image sizes 640 train, 640 val
Using 8 dataloader workers
Logging results to [1mruns\train\test2
Starting training for 25 epochs...
     Epoch   gpu_mem       box       obj       cls    labels  img_size
YOLO+BCC
  0%|          | 0/63 [00:00<?, ?it/s]
target_volunteers_bcc:  tensor([[[2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.],
         ...,
         [2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.]],
        [[2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.],
         ...,
         [2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.]],
        [[2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.],
         ...,
         [2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.]],
        ...,
        [[2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.],
         ...,
         [2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.]],
        [[2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.],
         ...,
         [2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.]],
        [[2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.],
         ...,
         [2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.]]], device='cuda:0')
target_volunteers_bcc size:  torch.Size([25, 25200, 193])
batch_pred_bcc:  tensor([[[-8.32899e+00, -8.08883e+00, -4.88401e-04],
         [-8.24789e+00, -7.81210e+00, -4.88401e-04],
         [-7.70726e+00, -7.46833e+00, -9.77040e-04],
         ...,
         [-5.45024e+00, -5.35538e+00, -8.82791e-03],
         [-5.67679e+00, -5.68399e+00, -6.85941e-03],
         [-5.39834e+00, -5.62649e+00, -8.33542e-03]],
        [[-8.67924e+00, -8.57010e+00, -4.88401e-04],
         [-8.58038e+00, -8.28180e+00, -4.88401e-04],
         [-8.04470e+00, -7.93970e+00, -4.88401e-04],
         ...,
         [-5.13154e+00, -5.00279e+00, -1.27766e-02],
         [-5.21260e+00, -5.12808e+00, -1.12940e-02],
         [-5.19633e+00, -5.42692e+00, -9.81362e-03]],
        [[-8.20185e+00, -8.10235e+00, -4.88401e-04],
         [-8.09623e+00, -7.81200e+00, -4.88401e-04],
         [-7.57446e+00, -7.50223e+00, -9.77040e-04],
         ...,
         [-5.19936e+00, -5.11088e+00, -1.17880e-02],
         [-5.35227e+00, -5.35691e+00, -9.32065e-03],
         [-5.21228e+00, -5.56739e+00, -9.32065e-03]],
        ...,
        [[-8.56747e+00, -8.46334e+00, -4.88401e-04],
         [-8.46789e+00, -8.19587e+00, -4.88401e-04],
         [-7.96631e+00, -7.85366e+00, -9.77040e-04],
         ...,
         [-5.25868e+00, -5.14475e+00, -1.12940e-02],
         [-5.41762e+00, -5.41644e+00, -8.82791e-03],
         [-5.15251e+00, -5.51295e+00, -9.81362e-03]],
        [[-8.70239e+00, -8.62390e+00, -4.88401e-04],
         [-8.59355e+00, -8.35476e+00, -4.88401e-04],
         [-8.10638e+00, -8.11757e+00, -4.88401e-04],
         ...,
         [-5.16752e+00, -5.05122e+00, -1.22821e-02],
         [-5.31229e+00, -5.29015e+00, -9.81362e-03],
         [-5.17254e+00, -5.50347e+00, -9.81362e-03]],
        [[-8.44552e+00, -8.24817e+00, -4.88401e-04],
         [-8.34598e+00, -7.97373e+00, -4.88401e-04],
         [-7.84468e+00, -7.80118e+00, -9.77040e-04],
         ...,
         [-5.25479e+00, -5.19254e+00, -1.08003e-02],
         [-5.41882e+00, -5.51055e+00, -8.33542e-03],
         [-5.08261e+00, -5.49032e+00, -1.03068e-02]]], device='cuda:0', grad_fn=<LogBackward0>)
batch_pred_bcc.size():  torch.Size([25, 25200, 3])
batch_pcm['variational']:  tensor([[[1.10000, 1.10000, 1.10000,  ..., 1.10000, 1.10000, 1.10000],
         [1.00000, 1.00000, 1.00000,  ..., 1.00000, 1.00000, 1.00000],
         [1.00000, 1.00000, 1.00000,  ..., 1.00000, 1.00000, 1.00000]],
        [[1.00000, 1.00000, 1.00000,  ..., 1.00000, 1.00000, 1.00000],
         [1.10000, 1.10000, 1.10000,  ..., 1.10000, 1.10000, 1.10000],
         [1.00000, 1.00000, 1.00000,  ..., 1.00000, 1.00000, 1.00000]],
        [[1.00000, 1.00000, 1.00000,  ..., 1.00000, 1.00000, 1.00000],
         [1.00000, 1.00000, 1.00000,  ..., 1.00000, 1.00000, 1.00000],
         [1.10000, 1.10000, 1.10000,  ..., 1.10000, 1.10000, 1.10000]]], device='cuda:0', dtype=torch.float64)
batch_pcm['variational'].size():  torch.Size([3, 3, 193])
batch_pcm['prior']:  tensor([[[1.10000, 1.10000, 1.10000,  ..., 1.10000, 1.10000, 1.10000],
         [1.00000, 1.00000, 1.00000,  ..., 1.00000, 1.00000, 1.00000],
         [1.00000, 1.00000, 1.00000,  ..., 1.00000, 1.00000, 1.00000]],
        [[1.00000, 1.00000, 1.00000,  ..., 1.00000, 1.00000, 1.00000],
         [1.10000, 1.10000, 1.10000,  ..., 1.10000, 1.10000, 1.10000],
         [1.00000, 1.00000, 1.00000,  ..., 1.00000, 1.00000, 1.00000]],
        [[1.00000, 1.00000, 1.00000,  ..., 1.00000, 1.00000, 1.00000],
         [1.00000, 1.00000, 1.00000,  ..., 1.00000, 1.00000, 1.00000],
         [1.10000, 1.10000, 1.10000,  ..., 1.10000, 1.10000, 1.10000]]], device='cuda:0', dtype=torch.float64)
batch_pcm['prior'].size():  torch.Size([3, 3, 193])
batch_qtargets tensor([[[3.31164e-17, 4.21065e-17, 1.00000e+00],
         [3.59146e-17, 5.55307e-17, 1.00000e+00],
         [6.16980e-17, 7.83491e-17, 1.00000e+00],
         ...,
         [5.94139e-16, 6.53272e-16, 1.00000e+00],
         [4.72779e-16, 4.69387e-16, 1.00000e+00],
         [6.25490e-16, 4.97894e-16, 1.00000e+00]],
        [[2.33309e-17, 2.60211e-17, 1.00000e+00],
         [2.57549e-17, 3.47163e-17, 1.00000e+00],
         [4.40062e-17, 4.88772e-17, 1.00000e+00],
         ...,
         [8.20412e-16, 9.33145e-16, 1.00000e+00],
         [7.55407e-16, 8.22016e-16, 1.00000e+00],
         [7.66671e-16, 6.08786e-16, 1.00000e+00]],
        [[3.76061e-17, 4.15411e-17, 1.00000e+00],
         [4.17954e-17, 5.55358e-17, 1.00000e+00],
         [7.04614e-17, 7.57395e-17, 1.00000e+00],
         ...,
         [7.65829e-16, 8.36695e-16, 1.00000e+00],
         [6.55648e-16, 6.52614e-16, 1.00000e+00],
         [7.54163e-16, 5.28745e-16, 1.00000e+00]],
        ...,
        [[2.60895e-17, 2.89526e-17, 1.00000e+00],
         [2.88212e-17, 3.78317e-17, 1.00000e+00],
         [4.76169e-17, 5.32959e-17, 1.00000e+00],
         ...,
         [7.21387e-16, 8.08433e-16, 1.00000e+00],
         [6.13842e-16, 6.14573e-16, 1.00000e+00],
         [8.01016e-16, 5.58602e-16, 1.00000e+00]],
        [[2.27967e-17, 2.46581e-17, 1.00000e+00],
         [2.54184e-17, 3.22733e-17, 1.00000e+00],
         [4.13741e-17, 4.09133e-17, 1.00000e+00],
         ...,
         [7.91032e-16, 8.88594e-16, 1.00000e+00],
         [6.82724e-16, 6.97998e-16, 1.00000e+00],
         [7.85140e-16, 5.63912e-16, 1.00000e+00]],
        [[2.94732e-17, 3.59048e-17, 1.00000e+00],
         [3.25582e-17, 4.72420e-17, 1.00000e+00],
         [5.37762e-17, 5.61681e-17, 1.00000e+00],
         ...,
         [7.23834e-16, 7.70330e-16, 1.00000e+00],
         [6.12812e-16, 5.59097e-16, 1.00000e+00],
         [8.59417e-16, 5.71657e-16, 1.00000e+00]]], device='cuda:0')
batch_qtargets size torch.Size([25, 25200, 3])



