Overriding model.yaml nc=80 with nc=3
                 from  n    params  module                                  arguments
  0                -1  1      3520  models.common.Conv                      [3, 32, 6, 2, 2]
  1                -1  1     18560  models.common.Conv                      [32, 64, 3, 2]
  2                -1  1     18816  models.common.C3                        [64, 64, 1]
  3                -1  1     73984  models.common.Conv                      [64, 128, 3, 2]
  4                -1  2    115712  models.common.C3                        [128, 128, 2]
  5                -1  1    295424  models.common.Conv                      [128, 256, 3, 2]
  6                -1  3    625152  models.common.C3                        [256, 256, 3]
  7                -1  1   1180672  models.common.Conv                      [256, 512, 3, 2]
  8                -1  1   1182720  models.common.C3                        [512, 512, 1]
  9                -1  1    656896  models.common.SPPF                      [512, 512, 5]
 10                -1  1    131584  models.common.Conv                      [512, 256, 1, 1]
 11                -1  1         0  torch.nn.modules.upsampling.Upsample    [None, 2, 'nearest']
 12           [-1, 6]  1         0  models.common.Concat                    [1]
 13                -1  1    361984  models.common.C3                        [512, 256, 1, False]
 14                -1  1     33024  models.common.Conv                      [256, 128, 1, 1]
 15                -1  1         0  torch.nn.modules.upsampling.Upsample    [None, 2, 'nearest']
 16           [-1, 4]  1         0  models.common.Concat                    [1]
 17                -1  1     90880  models.common.C3                        [256, 128, 1, False]
 18                -1  1    147712  models.common.Conv                      [128, 128, 3, 2]
 19          [-1, 14]  1         0  models.common.Concat                    [1]
 20                -1  1    296448  models.common.C3                        [256, 256, 1, False]
 21                -1  1    590336  models.common.Conv                      [256, 256, 3, 2]
 22          [-1, 10]  1         0  models.common.Concat                    [1]
 23                -1  1   1182720  models.common.C3                        [512, 512, 1, False]
 24      [17, 20, 23]  1     21576  models.yolo.Detect                      [3, [[10, 13, 16, 30, 33, 23], [30, 61, 62, 45, 59, 119], [116, 90, 156, 198, 373, 326]], [128, 256, 512]]
C:\Users\rb01243\Anaconda3\lib\site-packages\torch\functional.py:445: UserWarning: torch.meshgrid: in an upcoming release, it will be required to pass the indexing argument. (Triggered internally at  ..\aten\src\ATen\native\TensorShape.cpp:2157.)
  return _VF.meshgrid(tensors, **kwargs)  # type: ignore[attr-defined]
Model Summary: 270 layers, 7027720 parameters, 7027720 gradients, 15.9 GFLOPs
Transferred 344/350 items from yolov5s.pt
Scaled weight_decay = 0.00046875
[34m[1moptimizer:[39m[22m SGD with parameter groups 57 weight, 60 weight (no decay), 60 bias
[34m[1mtrain: [39m[22mScanning '..\data\datasets\All_Volunteers_Crowdsourced\labels\train.cache' images and labels... 2103 found, 0 missing, 0 empty, 0 corrupted: 100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 2103/2103 [00:00<?, ?it/s]
[34m[1mval: [39m[22mScanning '..\data\datasets\All_Volunteers_IID\labels\val' images and labels...860 found, 0 missing, 0 empty, 2 corrupted: 100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 860/860 [00:04<00:00, 213.31it/s]
[34m[1mval: [39m[22mWARNING: Ignoring corrupted image and/or label ..\data\datasets\All_Volunteers_IID\images\val\Unknown-X-20191113-153036-XKNMQ7OPXKU-3.9c62fc6bf51ff6f1eafe.JPG: non-normalized or out of bounds coordinate labels
[34m[1mval: [39m[22mWARNING: Ignoring corrupted image and/or label ..\data\datasets\All_Volunteers_IID\images\val\Unknown-X-20191113-153036-XKNMQ7OPXKU-3.1f089314ef9273e4647b.JPG: non-normalized or out of bounds coordinate labels
[34m[1mval: [39m[22mWARNING: Cache directory ..\data\datasets\All_Volunteers_IID\labels is not writeable: [WinError 183] Cannot create a file when that file already exists: '..\\data\\datasets\\All_Volunteers_IID\\labels\\val.cache.npy' -> '..\\data\\datasets\\All_Volunteers_IID\\labels\\val.cache'
Plotting labels...
[34m[1mautoanchor: [39m[22mAnalyzing anchors... anchors/target = 5.23, Best Possible Recall (BPR) = 0.9990
Image sizes 640 train, 640 val
Using 8 dataloader workers
Logging results to [1mruns\train\Expset2_all_cyolo52
Starting training for 15 epochs...
     Epoch   gpu_mem       box       obj       cls    labels  img_size
YOLO+BCC
  0%|          | 0/106 [00:00<?, ?it/s]
y_yolo:  tensor([[[1.31836e-02, 0.00000e+00, 1.01953e+01,  ..., 4.00391e-01, 4.28223e-01, 3.75366e-02],
         [2.24457e-02, 9.76324e-05, 1.09375e+01,  ..., 2.57568e-01, 3.23975e-01, 5.88989e-02],
         [3.23792e-02, 2.34413e-03, 1.58984e+01,  ..., 2.53418e-01, 2.37549e-01, 7.18384e-02],
         ...,
         [8.66211e-01, 9.85840e-01, 7.06000e+02,  ..., 2.30713e-01, 2.81250e-01, 3.33740e-01],
         [9.08691e-01, 9.83398e-01, 6.85500e+02,  ..., 2.25708e-01, 3.10791e-01, 3.18604e-01],
         [9.59961e-01, 9.84375e-01, 6.74500e+02,  ..., 2.37183e-01, 2.32788e-01, 2.57080e-01]],
        [[1.35956e-02, 0.00000e+00, 1.15781e+01,  ..., 3.71094e-01, 4.02344e-01, 3.42407e-02],
         [2.31171e-02, 0.00000e+00, 1.23750e+01,  ..., 2.38403e-01, 3.02979e-01, 5.22461e-02],
         [3.31116e-02, 1.90449e-03, 1.62969e+01,  ..., 2.32666e-01, 2.21069e-01, 6.61011e-02],
         ...,
         [8.73535e-01, 9.85352e-01, 5.46000e+02,  ..., 2.50488e-01, 2.65137e-01, 3.56445e-01],
         [9.14062e-01, 9.79492e-01, 5.17500e+02,  ..., 2.27417e-01, 2.99805e-01, 3.41553e-01],
         [9.62402e-01, 9.82910e-01, 5.33000e+02,  ..., 2.42432e-01, 2.26562e-01, 2.65137e-01]],
        [[1.18179e-02, 0.00000e+00, 6.24219e+00,  ..., 3.80127e-01, 4.23584e-01, 2.91443e-02],
         [2.10266e-02, 0.00000e+00, 7.38672e+00,  ..., 2.34741e-01, 3.29590e-01, 4.50134e-02],
         [3.07159e-02, 2.46048e-03, 1.35703e+01,  ..., 2.40967e-01, 2.34375e-01, 5.77087e-02],
         ...,
         [8.71094e-01, 9.84375e-01, 6.00000e+02,  ..., 2.66357e-01, 2.56348e-01, 3.60840e-01],
         [9.11133e-01, 9.79492e-01, 5.69000e+02,  ..., 2.32544e-01, 2.98584e-01, 3.43750e-01],
         [9.61914e-01, 9.81934e-01, 5.80000e+02,  ..., 2.54395e-01, 2.17163e-01, 2.88330e-01]],
        ...,
        [[1.36566e-02, 0.00000e+00, 1.53828e+01,  ..., 4.26270e-01, 4.33105e-01, 2.25830e-02],
         [2.29340e-02, 0.00000e+00, 1.60625e+01,  ..., 2.91016e-01, 3.30566e-01, 3.32642e-02],
         [3.33862e-02, 1.93501e-03, 1.90625e+01,  ..., 2.68066e-01, 2.45972e-01, 4.23279e-02],
         ...,
         [8.67188e-01, 9.85352e-01, 6.44500e+02,  ..., 2.51221e-01, 2.79785e-01, 3.14941e-01],
         [9.11621e-01, 9.83398e-01, 6.37000e+02,  ..., 2.39746e-01, 3.03711e-01, 2.99805e-01],
         [9.63379e-01, 9.83398e-01, 6.45500e+02,  ..., 2.58301e-01, 2.16797e-01, 2.42188e-01]],
        [[1.27411e-02, 0.00000e+00, 1.07578e+01,  ..., 3.87695e-01, 4.03809e-01, 3.01056e-02],
         [2.19269e-02, 0.00000e+00, 1.15781e+01,  ..., 2.51953e-01, 3.11035e-01, 4.56848e-02],
         [3.19824e-02, 1.97792e-03, 1.59219e+01,  ..., 2.44751e-01, 2.37793e-01, 5.80139e-02],
         ...,
         [8.64746e-01, 9.85840e-01, 6.36000e+02,  ..., 2.66602e-01, 2.75635e-01, 3.22998e-01],
         [9.07715e-01, 9.83398e-01, 6.39500e+02,  ..., 2.56348e-01, 3.03955e-01, 3.06152e-01],
         [9.59961e-01, 9.84375e-01, 6.64500e+02,  ..., 2.64648e-01, 2.21802e-01, 2.50977e-01]],
        [[1.21078e-02, 0.00000e+00, 9.06250e+00,  ..., 4.01855e-01, 3.64746e-01, 4.05273e-02],
         [2.11945e-02, 2.44379e-05, 9.67188e+00,  ..., 2.64160e-01, 2.80518e-01, 6.16455e-02],
         [3.12042e-02, 2.25258e-03, 1.45703e+01,  ..., 2.62207e-01, 2.05566e-01, 7.23877e-02],
         ...,
         [8.66211e-01, 9.85352e-01, 6.15000e+02,  ..., 2.88086e-01, 2.40234e-01, 3.15674e-01],
         [9.09180e-01, 9.81445e-01, 5.99500e+02,  ..., 2.73682e-01, 2.60742e-01, 3.02979e-01],
         [9.59473e-01, 9.82910e-01, 6.08500e+02,  ..., 2.83203e-01, 1.91650e-01, 2.42920e-01]]], device='cuda:0', dtype=torch.float16, grad_fn=<CopySlices>)
y_yolo size:  torch.Size([20, 25200, 8])
wh:  tensor([[[0.01593, 0.04254],
         [0.01709, 0.05255],
         [0.02484, 0.02698],
         ...,
         [1.10352, 0.40356],
         [1.07129, 0.48486],
         [1.05371, 0.59863]],
        [[0.01810, 0.04608],
         [0.01933, 0.05609],
         [0.02547, 0.03023],
         ...,
         [0.85303, 0.46045],
         [0.80859, 0.52246],
         [0.83301, 0.58984]],
        [[0.00975, 0.03625],
         [0.01154, 0.04752],
         [0.02121, 0.02251],
         ...,
         [0.93750, 0.41846],
         [0.88916, 0.50488],
         [0.90625, 0.55957]],
        ...,
        [[0.02403, 0.04620],
         [0.02510, 0.05719],
         [0.02979, 0.03510],
         ...,
         [1.00684, 0.43164],
         [0.99512, 0.47510],
         [1.00879, 0.52637]],
        [[0.01682, 0.04254],
         [0.01810, 0.05347],
         [0.02487, 0.02808],
         ...,
         [0.99365, 0.45630],
         [0.99902, 0.50391],
         [1.03809, 0.58057]],
        [[0.01416, 0.04401],
         [0.01511, 0.05460],
         [0.02277, 0.02849],
         ...,
         [0.96094, 0.51074],
         [0.93652, 0.53662],
         [0.95068, 0.57910]]], device='cuda:0', dtype=torch.float16, grad_fn=<DivBackward0>)
wh size:  torch.Size([20, 25200, 2])
conf:  tensor([[0.00055, 0.00067, 0.00093,  ..., 0.02759, 0.03079, 0.03067],
        [0.00046, 0.00058, 0.00081,  ..., 0.02229, 0.02844, 0.02887],
        [0.00062, 0.00076, 0.00121,  ..., 0.02504, 0.03198, 0.03223],
        ...,
        [0.00055, 0.00068, 0.00096,  ..., 0.02727, 0.03027, 0.03038],
        [0.00040, 0.00050, 0.00085,  ..., 0.03333, 0.03384, 0.03131],
        [0.00046, 0.00057, 0.00077,  ..., 0.02386, 0.02881, 0.02954]], device='cuda:0', dtype=torch.float16, grad_fn=<SelectBackward0>)
conf size:  torch.Size([20, 25200])
p:  tensor([[0.00055, 0.00067, 0.00093,  ..., 0.02759, 0.03079, 0.03067],
        [0.00046, 0.00058, 0.00081,  ..., 0.02229, 0.02844, 0.02887],
        [0.00062, 0.00076, 0.00121,  ..., 0.02504, 0.03198, 0.03223],
        ...,
        [0.00055, 0.00068, 0.00096,  ..., 0.02727, 0.03027, 0.03038],
        [0.00040, 0.00050, 0.00085,  ..., 0.03333, 0.03384, 0.03131],
        [0.00046, 0.00057, 0.00077,  ..., 0.02386, 0.02881, 0.02954]], device='cuda:0', dtype=torch.float16, grad_fn=<SelectBackward0>)
p size:  torch.Size([20, 25200])
sigma_t:  tensor([[[0.40039, 0.42822, 0.03754],
         [0.25757, 0.32397, 0.05890],
         [0.25342, 0.23755, 0.07184],
         ...,
         [0.23071, 0.28125, 0.33374],
         [0.22571, 0.31079, 0.31860],
         [0.23718, 0.23279, 0.25708]],
        [[0.37109, 0.40234, 0.03424],
         [0.23840, 0.30298, 0.05225],
         [0.23267, 0.22107, 0.06610],
         ...,
         [0.25049, 0.26514, 0.35645],
         [0.22742, 0.29980, 0.34155],
         [0.24243, 0.22656, 0.26514]],
        [[0.38013, 0.42358, 0.02914],
         [0.23474, 0.32959, 0.04501],
         [0.24097, 0.23438, 0.05771],
         ...,
         [0.26636, 0.25635, 0.36084],
         [0.23254, 0.29858, 0.34375],
         [0.25439, 0.21716, 0.28833]],
        ...,
        [[0.42627, 0.43311, 0.02258],
         [0.29102, 0.33057, 0.03326],
         [0.26807, 0.24597, 0.04233],
         ...,
         [0.25122, 0.27979, 0.31494],
         [0.23975, 0.30371, 0.29980],
         [0.25830, 0.21680, 0.24219]],
        [[0.38770, 0.40381, 0.03011],
         [0.25195, 0.31104, 0.04568],
         [0.24475, 0.23779, 0.05801],
         ...,
         [0.26660, 0.27563, 0.32300],
         [0.25635, 0.30396, 0.30615],
         [0.26465, 0.22180, 0.25098]],
        [[0.40186, 0.36475, 0.04053],
         [0.26416, 0.28052, 0.06165],
         [0.26221, 0.20557, 0.07239],
         ...,
         [0.28809, 0.24023, 0.31567],
         [0.27368, 0.26074, 0.30298],
         [0.28320, 0.19165, 0.24292]]], device='cuda:0', dtype=torch.float16, grad_fn=<SliceBackward0>)
sigma_t size:  torch.Size([20, 25200, 3])
sigma_prime_t:  tensor([[[0.46226, 0.49440, 0.04334],
         [0.40217, 0.50586, 0.09197],
         [0.45028, 0.42208, 0.12764],
         ...,
         [0.27281, 0.33256, 0.39463],
         [0.26395, 0.36345, 0.37259],
         [0.32623, 0.32018, 0.35359]],
        [[0.45946, 0.49815, 0.04239],
         [0.40160, 0.51038, 0.08801],
         [0.44758, 0.42527, 0.12716],
         ...,
         [0.28723, 0.30403, 0.40873],
         [0.26177, 0.34509, 0.39314],
         [0.33023, 0.30861, 0.36116]],
        [[0.45641, 0.50859, 0.03499],
         [0.38524, 0.54089, 0.07387],
         [0.45205, 0.43969, 0.10826],
         ...,
         [0.30146, 0.29014, 0.40840],
         [0.26580, 0.34129, 0.39291],
         [0.33478, 0.28578, 0.37944]],
        ...,
        [[0.48332, 0.49107, 0.02561],
         [0.44440, 0.50480, 0.05080],
         [0.48182, 0.44210, 0.07608],
         ...,
         [0.29697, 0.33074, 0.37229],
         [0.28431, 0.36016, 0.35553],
         [0.36011, 0.30225, 0.33764]],
        [[0.47187, 0.49148, 0.03664],
         [0.41394, 0.51101, 0.07506],
         [0.45277, 0.43990, 0.10732],
         ...,
         [0.30813, 0.31857, 0.37331],
         [0.29586, 0.35080, 0.35334],
         [0.35888, 0.30078, 0.34034]],
        [[0.49788, 0.45191, 0.05021],
         [0.43568, 0.46265, 0.10167],
         [0.48542, 0.38056, 0.13401],
         ...,
         [0.34134, 0.28464, 0.37402],
         [0.32682, 0.31137, 0.36181],
         [0.39456, 0.26701, 0.33844]]], device='cuda:0', grad_fn=<DivBackward0>)
sigma_prime_t size:  torch.Size([20, 25200, 3])
class_prob:  tensor([[[2.55473e-04, 2.73231e-04, 2.39506e-05],
         [2.69246e-04, 3.38664e-04, 6.15694e-05],
         [4.18252e-04, 3.92061e-04, 1.18565e-04],
         ...,
         [7.52614e-03, 9.17473e-03, 1.08870e-02],
         [8.12774e-03, 1.11916e-02, 1.14729e-02],
         [1.00054e-02, 9.82002e-03, 1.08448e-02]],
        [[2.09775e-04, 2.27440e-04, 1.93559e-05],
         [2.31715e-04, 2.94478e-04, 5.07803e-05],
         [3.62815e-04, 3.44731e-04, 1.03077e-04],
         ...,
         [6.40333e-03, 6.77780e-03, 9.11196e-03],
         [7.44529e-03, 9.81516e-03, 1.11819e-02],
         [9.53360e-03, 8.90955e-03, 1.04265e-02]],
        [[2.82491e-04, 3.14786e-04, 2.16585e-05],
         [2.90972e-04, 4.08542e-04, 5.57962e-05],
         [5.45355e-04, 5.30437e-04, 1.30606e-04],
         ...,
         [7.54857e-03, 7.26489e-03, 1.02262e-02],
         [8.50098e-03, 1.09152e-02, 1.25663e-02],
         [1.07888e-02, 9.20981e-03, 1.22280e-02]],
        ...,
        [[2.65036e-04, 2.69286e-04, 1.40411e-05],
         [3.02181e-04, 3.43249e-04, 3.45404e-05],
         [4.61794e-04, 4.23731e-04, 7.29176e-05],
         ...,
         [8.09761e-03, 9.01833e-03, 1.01515e-02],
         [8.60698e-03, 1.09033e-02, 1.07631e-02],
         [1.09402e-02, 9.18232e-03, 1.02577e-02]],
        [[1.88668e-04, 1.96509e-04, 1.46506e-05],
         [2.08435e-04, 2.57312e-04, 3.77939e-05],
         [3.86029e-04, 3.75055e-04, 9.15014e-05],
         ...,
         [1.02684e-02, 1.06163e-02, 1.24405e-02],
         [1.00130e-02, 1.18726e-02, 1.19584e-02],
         [1.12369e-02, 9.41767e-03, 1.06564e-02]],
        [[2.29931e-04, 2.08698e-04, 2.31886e-05],
         [2.46595e-04, 2.61865e-04, 5.75464e-05],
         [3.75441e-04, 2.94340e-04, 1.03648e-04],
         ...,
         [8.14591e-03, 6.79286e-03, 8.92598e-03],
         [9.41529e-03, 8.97014e-03, 1.04232e-02],
         [1.16556e-02, 7.88765e-03, 9.99772e-03]]], device='cuda:0', grad_fn=<MulBackward0>)
class_prob size:  torch.Size([20, 25200, 3])
bkgd_prob:  tensor([[0.99951, 0.99951, 0.99902,  ..., 0.97266, 0.96924, 0.96924],
        [0.99951, 0.99951, 0.99902,  ..., 0.97754, 0.97168, 0.97119],
        [0.99951, 0.99902, 0.99902,  ..., 0.97510, 0.96777, 0.96777],
        ...,
        [0.99951, 0.99951, 0.99902,  ..., 0.97266, 0.96973, 0.96973],
        [0.99951, 0.99951, 0.99902,  ..., 0.96680, 0.96631, 0.96875],
        [0.99951, 0.99951, 0.99902,  ..., 0.97607, 0.97119, 0.97070]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
bkgd_prob size:  torch.Size([20, 25200])
bcc_prob:  tensor([[[2.55473e-04, 2.73231e-04, 2.39506e-05, 9.99512e-01],
         [2.69246e-04, 3.38664e-04, 6.15694e-05, 9.99512e-01],
         [4.18252e-04, 3.92061e-04, 1.18565e-04, 9.99023e-01],
         ...,
         [7.52614e-03, 9.17473e-03, 1.08870e-02, 9.72656e-01],
         [8.12774e-03, 1.11916e-02, 1.14729e-02, 9.69238e-01],
         [1.00054e-02, 9.82002e-03, 1.08448e-02, 9.69238e-01]],
        [[2.09775e-04, 2.27440e-04, 1.93559e-05, 9.99512e-01],
         [2.31715e-04, 2.94478e-04, 5.07803e-05, 9.99512e-01],
         [3.62815e-04, 3.44731e-04, 1.03077e-04, 9.99023e-01],
         ...,
         [6.40333e-03, 6.77780e-03, 9.11196e-03, 9.77539e-01],
         [7.44529e-03, 9.81516e-03, 1.11819e-02, 9.71680e-01],
         [9.53360e-03, 8.90955e-03, 1.04265e-02, 9.71191e-01]],
        [[2.82491e-04, 3.14786e-04, 2.16585e-05, 9.99512e-01],
         [2.90972e-04, 4.08542e-04, 5.57962e-05, 9.99023e-01],
         [5.45355e-04, 5.30437e-04, 1.30606e-04, 9.99023e-01],
         ...,
         [7.54857e-03, 7.26489e-03, 1.02262e-02, 9.75098e-01],
         [8.50098e-03, 1.09152e-02, 1.25663e-02, 9.67773e-01],
         [1.07888e-02, 9.20981e-03, 1.22280e-02, 9.67773e-01]],
        ...,
        [[2.65036e-04, 2.69286e-04, 1.40411e-05, 9.99512e-01],
         [3.02181e-04, 3.43249e-04, 3.45404e-05, 9.99512e-01],
         [4.61794e-04, 4.23731e-04, 7.29176e-05, 9.99023e-01],
         ...,
         [8.09761e-03, 9.01833e-03, 1.01515e-02, 9.72656e-01],
         [8.60698e-03, 1.09033e-02, 1.07631e-02, 9.69727e-01],
         [1.09402e-02, 9.18232e-03, 1.02577e-02, 9.69727e-01]],
        [[1.88668e-04, 1.96509e-04, 1.46506e-05, 9.99512e-01],
         [2.08435e-04, 2.57312e-04, 3.77939e-05, 9.99512e-01],
         [3.86029e-04, 3.75055e-04, 9.15014e-05, 9.99023e-01],
         ...,
         [1.02684e-02, 1.06163e-02, 1.24405e-02, 9.66797e-01],
         [1.00130e-02, 1.18726e-02, 1.19584e-02, 9.66309e-01],
         [1.12369e-02, 9.41767e-03, 1.06564e-02, 9.68750e-01]],
        [[2.29931e-04, 2.08698e-04, 2.31886e-05, 9.99512e-01],
         [2.46595e-04, 2.61865e-04, 5.75464e-05, 9.99512e-01],
         [3.75441e-04, 2.94340e-04, 1.03648e-04, 9.99023e-01],
         ...,
         [8.14591e-03, 6.79286e-03, 8.92598e-03, 9.76074e-01],
         [9.41529e-03, 8.97014e-03, 1.04232e-02, 9.71191e-01],
         [1.16556e-02, 7.88765e-03, 9.99772e-03, 9.70703e-01]]], device='cuda:0', grad_fn=<CatBackward0>)
bcc_prob size:  torch.Size([20, 25200, 4])
Minimum probs (c1, c2, bkgd): [5e-06, 2e-06, 4e-06, 0.737305]

  0%|          | 0/106 [00:08<?, ?it/s]