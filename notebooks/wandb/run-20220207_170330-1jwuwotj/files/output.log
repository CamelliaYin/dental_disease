Overriding model.yaml nc=80 with nc=3
                 from  n    params  module                                  arguments
  0                -1  1      3520  models.common.Conv                      [3, 32, 6, 2, 2]
  1                -1  1     18560  models.common.Conv                      [32, 64, 3, 2]
  2                -1  1     18816  models.common.C3                        [64, 64, 1]
  3                -1  1     73984  models.common.Conv                      [64, 128, 3, 2]
  4                -1  2    115712  models.common.C3                        [128, 128, 2]
  5                -1  1    295424  models.common.Conv                      [128, 256, 3, 2]
  6                -1  3    625152  models.common.C3                        [256, 256, 3]
  7                -1  1   1180672  models.common.Conv                      [256, 512, 3, 2]
  8                -1  1   1182720  models.common.C3                        [512, 512, 1]
  9                -1  1    656896  models.common.SPPF                      [512, 512, 5]
 10                -1  1    131584  models.common.Conv                      [512, 256, 1, 1]
 11                -1  1         0  torch.nn.modules.upsampling.Upsample    [None, 2, 'nearest']
 12           [-1, 6]  1         0  models.common.Concat                    [1]
 13                -1  1    361984  models.common.C3                        [512, 256, 1, False]
 14                -1  1     33024  models.common.Conv                      [256, 128, 1, 1]
 15                -1  1         0  torch.nn.modules.upsampling.Upsample    [None, 2, 'nearest']
 16           [-1, 4]  1         0  models.common.Concat                    [1]
 17                -1  1     90880  models.common.C3                        [256, 128, 1, False]
 18                -1  1    147712  models.common.Conv                      [128, 128, 3, 2]
 19          [-1, 14]  1         0  models.common.Concat                    [1]
 20                -1  1    296448  models.common.C3                        [256, 256, 1, False]
 21                -1  1    590336  models.common.Conv                      [256, 256, 3, 2]
 22          [-1, 10]  1         0  models.common.Concat                    [1]
 23                -1  1   1182720  models.common.C3                        [512, 512, 1, False]
 24      [17, 20, 23]  1     21576  models.yolo.Detect                      [3, [[10, 13, 16, 30, 33, 23], [30, 61, 62, 45, 59, 119], [116, 90, 156, 198, 373, 326]], [128, 256, 512]]
C:\Users\rb01243\Anaconda3\lib\site-packages\torch\functional.py:445: UserWarning: torch.meshgrid: in an upcoming release, it will be required to pass the indexing argument. (Triggered internally at  ..\aten\src\ATen\native\TensorShape.cpp:2157.)
  return _VF.meshgrid(tensors, **kwargs)  # type: ignore[attr-defined]
Model Summary: 270 layers, 7027720 parameters, 7027720 gradients, 15.9 GFLOPs
Transferred 344/350 items from yolov5s.pt
Scaled weight_decay = 0.00046875
[34m[1moptimizer:[39m[22m SGD with parameter groups 57 weight, 60 weight (no decay), 60 bias


[34m[1mtrain: [39m[22mScanning '..\data\datasets\All_Volunteers_Crowdsourced\labels\train' images and labels...2102 found, 0 missing, 0 empty, 0 corrupted: 100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 2102/2102 [00:07<00:00, 291.69it/s]
[34m[1mtrain: [39m[22mWARNING: Cache directory ..\data\datasets\All_Volunteers_Crowdsourced\labels is not writeable: [WinError 183] Cannot create a file when that file already exists: '..\\data\\datasets\\All_Volunteers_Crowdsourced\\labels\\train.cache.npy' -> '..\\data\\datasets\\All_Volunteers_Crowdsourced\\labels\\train.cache'

[34m[1mval: [39m[22mScanning '..\data\datasets\All_Volunteers_IID\labels\val' images and labels...860 found, 0 missing, 0 empty, 2 corrupted: 100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 860/860 [00:05<00:00, 169.24it/s]
[34m[1mval: [39m[22mWARNING: Ignoring corrupted image and/or label ..\data\datasets\All_Volunteers_IID\images\val\Unknown-X-20191113-153036-XKNMQ7OPXKU-3.9c62fc6bf51ff6f1eafe.JPG: non-normalized or out of bounds coordinate labels
[34m[1mval: [39m[22mWARNING: Ignoring corrupted image and/or label ..\data\datasets\All_Volunteers_IID\images\val\Unknown-X-20191113-153036-XKNMQ7OPXKU-3.1f089314ef9273e4647b.JPG: non-normalized or out of bounds coordinate labels
[34m[1mval: [39m[22mWARNING: Cache directory ..\data\datasets\All_Volunteers_IID\labels is not writeable: [WinError 183] Cannot create a file when that file already exists: '..\\data\\datasets\\All_Volunteers_IID\\labels\\val.cache.npy' -> '..\\data\\datasets\\All_Volunteers_IID\\labels\\val.cache'
Plotting labels...
[34m[1mautoanchor: [39m[22mAnalyzing anchors... anchors/target = 5.23, Best Possible Recall (BPR) = 0.9989
Image sizes 640 train, 640 val
Using 8 dataloader workers
Logging results to [1mruns\train\LargeDS_cyolo21
Starting training for 10 epochs...
     Epoch   gpu_mem       box       obj       cls    labels  img_size
YOLO+BCC
  0%|          | 0/106 [00:00<?, ?it/s]
target_volunteers_bcc:  tensor([[[2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.],
         ...,
         [2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.]],
        [[2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.],
         ...,
         [2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.]],
        [[2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.],
         ...,
         [2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.]],
        ...,
        [[2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.],
         ...,
         [2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.]],
        [[2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.],
         ...,
         [2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.]],
        [[2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.],
         ...,
         [2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.]]])
target_volunteers_bcc size:  torch.Size([20, 25200, 505])
batch_pred_bcc:  tensor([[[-8.64705e+00, -8.62289e+00, -1.09785e+01, -4.88401e-04],
         [-8.56785e+00, -8.35336e+00, -1.00431e+01, -4.88401e-04],
         [-8.03691e+00, -8.15829e+00, -9.35509e+00, -4.88401e-04],
         ...,
         [-4.74561e+00, -4.81262e+00, -4.59067e+00, -2.72227e-02],
         [-4.69158e+00, -4.61871e+00, -4.53593e+00, -3.02377e-02],
         [-4.47057e+00, -4.71973e+00, -4.59691e+00, -3.07411e-02]],
        [[-8.47730e+00, -8.39584e+00, -1.08684e+01, -4.88401e-04],
         [-8.37486e+00, -8.13385e+00, -9.89235e+00, -4.88401e-04],
         [-7.92772e+00, -7.97459e+00, -9.18484e+00, -9.77040e-04],
         ...,
         [-5.04790e+00, -4.99301e+00, -4.69776e+00, -2.27170e-02],
         [-4.89870e+00, -4.62397e+00, -4.49431e+00, -2.87291e-02],
         [-4.65293e+00, -4.72063e+00, -4.56341e+00, -2.92317e-02]],
        [[-8.18599e+00, -8.07287e+00, -1.07538e+01, -4.88401e-04],
         [-8.15514e+00, -7.81295e+00, -9.80798e+00, -9.77040e-04],
         [-7.52892e+00, -7.54999e+00, -8.95833e+00, -9.77040e-04],
         ...,
         [-4.88311e+00, -4.92050e+00, -4.57928e+00, -2.52177e-02],
         [-4.76736e+00, -4.51762e+00, -4.37687e+00, -3.27573e-02],
         [-4.52736e+00, -4.68559e+00, -4.40214e+00, -3.27573e-02]],
        ...,
        [[-8.57600e+00, -8.53405e+00, -1.11349e+01, -4.88401e-04],
         [-8.47645e+00, -8.26404e+00, -1.01883e+01, -4.88401e-04],
         [-7.86373e+00, -7.89106e+00, -9.30756e+00, -9.77040e-04],
         ...,
         [-4.57876e+00, -4.54540e+00, -4.38670e+00, -3.37669e-02],
         [-4.60359e+00, -4.43324e+00, -4.42684e+00, -3.42720e-02],
         [-4.48855e+00, -4.66517e+00, -4.54159e+00, -3.17487e-02]],
        [[-8.38577e+00, -8.48133e+00, -1.06867e+01, -4.88401e-04],
         [-8.31675e+00, -8.25314e+00, -9.77445e+00, -4.88401e-04],
         [-7.89630e+00, -8.13425e+00, -9.19256e+00, -9.77040e-04],
         ...,
         [-4.80803e+00, -4.98968e+00, -4.71736e+00, -2.42167e-02],
         [-4.66573e+00, -4.71234e+00, -4.56475e+00, -2.92317e-02],
         [-4.44991e+00, -4.83740e+00, -4.60112e+00, -3.02377e-02]],
        [[-8.75709e+00, -8.48879e+00, -1.11883e+01, -4.88401e-04],
         [-8.73663e+00, -8.21194e+00, -1.02513e+01, -4.88401e-04],
         [-8.11024e+00, -7.94894e+00, -9.45290e+00, -4.88401e-04],
         ...,
         [-4.84468e+00, -4.93248e+00, -4.72940e+00, -2.42167e-02],
         [-4.77004e+00, -4.57694e+00, -4.56221e+00, -2.97346e-02],
         [-4.52744e+00, -4.78964e+00, -4.73476e+00, -2.82267e-02]]], device='cuda:0', grad_fn=<LogBackward0>)
batch_pred_bcc.size():  torch.Size([20, 25200, 4])
batch_pcm['variational']:  tensor([[[1.10000, 1.10000, 1.10000,  ..., 1.10000, 1.10000, 1.10000],
         [1.00000, 1.00000, 1.00000,  ..., 1.00000, 1.00000, 1.00000],
         [1.00000, 1.00000, 1.00000,  ..., 1.00000, 1.00000, 1.00000],
         [1.00000, 1.00000, 1.00000,  ..., 1.00000, 1.00000, 1.00000]],
        [[1.00000, 1.00000, 1.00000,  ..., 1.00000, 1.00000, 1.00000],
         [1.10000, 1.10000, 1.10000,  ..., 1.10000, 1.10000, 1.10000],
         [1.00000, 1.00000, 1.00000,  ..., 1.00000, 1.00000, 1.00000],
         [1.00000, 1.00000, 1.00000,  ..., 1.00000, 1.00000, 1.00000]],
        [[1.00000, 1.00000, 1.00000,  ..., 1.00000, 1.00000, 1.00000],
         [1.00000, 1.00000, 1.00000,  ..., 1.00000, 1.00000, 1.00000],
         [1.10000, 1.10000, 1.10000,  ..., 1.10000, 1.10000, 1.10000],
         [1.00000, 1.00000, 1.00000,  ..., 1.00000, 1.00000, 1.00000]],
        [[1.00000, 1.00000, 1.00000,  ..., 1.00000, 1.00000, 1.00000],
         [1.00000, 1.00000, 1.00000,  ..., 1.00000, 1.00000, 1.00000],
         [1.00000, 1.00000, 1.00000,  ..., 1.00000, 1.00000, 1.00000],
         [1.10000, 1.10000, 1.10000,  ..., 1.10000, 1.10000, 1.10000]]], device='cuda:0', dtype=torch.float64)
batch_pcm['variational'].size():  torch.Size([4, 4, 505])
batch_pcm['prior']:  tensor([[[1.10000, 1.10000, 1.10000,  ..., 1.10000, 1.10000, 1.10000],
         [1.00000, 1.00000, 1.00000,  ..., 1.00000, 1.00000, 1.00000],
         [1.00000, 1.00000, 1.00000,  ..., 1.00000, 1.00000, 1.00000],
         [1.00000, 1.00000, 1.00000,  ..., 1.00000, 1.00000, 1.00000]],
        [[1.00000, 1.00000, 1.00000,  ..., 1.00000, 1.00000, 1.00000],
         [1.10000, 1.10000, 1.10000,  ..., 1.10000, 1.10000, 1.10000],
         [1.00000, 1.00000, 1.00000,  ..., 1.00000, 1.00000, 1.00000],
         [1.00000, 1.00000, 1.00000,  ..., 1.00000, 1.00000, 1.00000]],
        [[1.00000, 1.00000, 1.00000,  ..., 1.00000, 1.00000, 1.00000],
         [1.00000, 1.00000, 1.00000,  ..., 1.00000, 1.00000, 1.00000],
         [1.10000, 1.10000, 1.10000,  ..., 1.10000, 1.10000, 1.10000],
         [1.00000, 1.00000, 1.00000,  ..., 1.00000, 1.00000, 1.00000]],
        [[1.00000, 1.00000, 1.00000,  ..., 1.00000, 1.00000, 1.00000],
         [1.00000, 1.00000, 1.00000,  ..., 1.00000, 1.00000, 1.00000],
         [1.00000, 1.00000, 1.00000,  ..., 1.00000, 1.00000, 1.00000],
         [1.10000, 1.10000, 1.10000,  ..., 1.10000, 1.10000, 1.10000]]], device='cuda:0', dtype=torch.float64)
batch_pcm['prior'].size():  torch.Size([4, 4, 505])
batch_qtargets tensor([[[2.27125e-33, 2.32681e-33, 1.00000e+00, 1.29244e-29],
         [9.64765e-34, 1.19555e-33, 1.00000e+00, 5.07211e-30],
         [8.24502e-34, 7.30290e-34, 1.00000e+00, 2.54902e-30],
         ...,
         [1.88979e-34, 1.76729e-34, 1.00000e+00, 2.11632e-32],
         [1.88840e-34, 2.03116e-34, 1.00000e+00, 1.99759e-32],
         [2.50356e-34, 1.95144e-34, 1.00000e+00, 2.12214e-32]],
        [[2.41095e-33, 2.61563e-33, 1.00000e+00, 1.15776e-29],
         [1.00639e-33, 1.28068e-33, 1.00000e+00, 4.36230e-30],
         [7.75683e-34, 7.40162e-34, 1.00000e+00, 2.14898e-30],
         ...,
         [1.55459e-34, 1.64238e-34, 1.00000e+00, 2.36612e-32],
         [1.47258e-34, 1.93815e-34, 1.00000e+00, 1.91907e-32],
         [2.01757e-34, 1.88541e-34, 1.00000e+00, 2.05522e-32]],
        [[2.87674e-33, 3.22121e-33, 1.00000e+00, 1.03231e-29],
         [1.15221e-33, 1.62230e-33, 1.00000e+00, 4.00723e-30],
         [9.21541e-34, 9.02338e-34, 1.00000e+00, 1.71342e-30],
         ...,
         [1.62830e-34, 1.56860e-34, 1.00000e+00, 2.09652e-32],
         [1.49321e-34, 1.91674e-34, 1.00000e+00, 1.69958e-32],
         [1.94680e-34, 1.66184e-34, 1.00000e+00, 1.74307e-32]],
        ...,
        [[2.85157e-33, 2.97368e-33, 1.00000e+00, 1.51139e-29],
         [1.22233e-33, 1.51159e-33, 1.00000e+00, 5.86475e-30],
         [9.34968e-34, 9.09749e-34, 1.00000e+00, 2.42962e-30],
         ...,
         [1.82094e-34, 1.88265e-34, 1.00000e+00, 1.71458e-32],
         [1.84906e-34, 2.19246e-34, 1.00000e+00, 1.78397e-32],
         [2.32675e-34, 1.95001e-34, 1.00000e+00, 2.00589e-32]],
        [[2.20298e-33, 2.00229e-33, 1.00000e+00, 9.65400e-30],
         [9.47954e-34, 1.01026e-33, 1.00000e+00, 3.87707e-30],
         [8.06632e-34, 6.35805e-34, 1.00000e+00, 2.16557e-30],
         ...,
         [2.01511e-34, 1.68040e-34, 1.00000e+00, 2.40940e-32],
         [1.99455e-34, 1.90368e-34, 1.00000e+00, 2.05798e-32],
         [2.56669e-34, 1.74212e-34, 1.00000e+00, 2.13214e-32]],
        [[2.50944e-33, 3.28173e-33, 1.00000e+00, 1.59411e-29],
         [1.00356e-33, 1.69601e-33, 1.00000e+00, 6.24604e-30],
         [8.44982e-34, 9.92841e-34, 1.00000e+00, 2.81102e-30],
         ...,
         [1.96627e-34, 1.80094e-34, 1.00000e+00, 2.43870e-32],
         [1.79249e-34, 2.17434e-34, 1.00000e+00, 2.05183e-32],
         [2.71494e-34, 2.08874e-34, 1.00000e+00, 2.44197e-32]]], device='cuda:0')

  0%|          | 0/106 [00:23<?, ?it/s]