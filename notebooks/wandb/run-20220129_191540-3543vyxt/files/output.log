Overriding model.yaml nc=80 with nc=2
                 from  n    params  module                                  arguments
  0                -1  1      3520  models.common.Conv                      [3, 32, 6, 2, 2]
  1                -1  1     18560  models.common.Conv                      [32, 64, 3, 2]
  2                -1  1     18816  models.common.C3                        [64, 64, 1]
  3                -1  1     73984  models.common.Conv                      [64, 128, 3, 2]
  4                -1  2    115712  models.common.C3                        [128, 128, 2]
  5                -1  1    295424  models.common.Conv                      [128, 256, 3, 2]
  6                -1  3    625152  models.common.C3                        [256, 256, 3]
  7                -1  1   1180672  models.common.Conv                      [256, 512, 3, 2]
  8                -1  1   1182720  models.common.C3                        [512, 512, 1]
  9                -1  1    656896  models.common.SPPF                      [512, 512, 5]
 10                -1  1    131584  models.common.Conv                      [512, 256, 1, 1]
 11                -1  1         0  torch.nn.modules.upsampling.Upsample    [None, 2, 'nearest']
 12           [-1, 6]  1         0  models.common.Concat                    [1]
 13                -1  1    361984  models.common.C3                        [512, 256, 1, False]
 14                -1  1     33024  models.common.Conv                      [256, 128, 1, 1]
 15                -1  1         0  torch.nn.modules.upsampling.Upsample    [None, 2, 'nearest']
 16           [-1, 4]  1         0  models.common.Concat                    [1]
 17                -1  1     90880  models.common.C3                        [256, 128, 1, False]
 18                -1  1    147712  models.common.Conv                      [128, 128, 3, 2]
 19          [-1, 14]  1         0  models.common.Concat                    [1]
 20                -1  1    296448  models.common.C3                        [256, 256, 1, False]
 21                -1  1    590336  models.common.Conv                      [256, 256, 3, 2]
 22          [-1, 10]  1         0  models.common.Concat                    [1]
 23                -1  1   1182720  models.common.C3                        [512, 512, 1, False]
 24      [17, 20, 23]  1     18879  models.yolo.Detect                      [2, [[10, 13, 16, 30, 33, 23], [30, 61, 62, 45, 59, 119], [116, 90, 156, 198, 373, 326]], [128, 256, 512]]
C:\Users\rb01243\Anaconda3\lib\site-packages\torch\functional.py:445: UserWarning: torch.meshgrid: in an upcoming release, it will be required to pass the indexing argument. (Triggered internally at  ..\aten\src\ATen\native\TensorShape.cpp:2157.)
  return _VF.meshgrid(tensors, **kwargs)  # type: ignore[attr-defined]
Model Summary: 270 layers, 7025023 parameters, 7025023 gradients, 15.9 GFLOPs
Transferred 344/350 items from yolov5s.pt
Scaled weight_decay = 0.00046875
[34m[1moptimizer:[39m[22m SGD with parameter groups 57 weight, 60 weight (no decay), 60 bias
[34m[1mtrain: [39m[22mScanning '..\data\datasets\bcc-tvt\labels\train.cache' images and labels... 70 found, 0 missing, 3 empty, 0 corrupted: 100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 70/70 [00:00<?, ?it/s]
[34m[1mval: [39m[22mScanning '..\data\datasets\iid-tvt\labels\val.cache' images and labels... 67 found, 13 missing, 0 empty, 0 corrupted: 100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 80/80 [00:00<?, ?it/s]
Plotting labels...
[34m[1mautoanchor: [39m[22mAnalyzing anchors... anchors/target = 6.03, Best Possible Recall (BPR) = 1.0000
Image sizes 640 train, 640 val
Using 8 dataloader workers
Logging results to [1mruns\train\test209963
Starting training for 80 epochs...
     Epoch   gpu_mem       box       obj       cls    labels  img_size
YOLO+BCC
  0%|          | 0/4 [00:00<?, ?it/s]
y_yolo:  tensor([[[1.20010e-02, 0.00000e+00, 1.03125e+01,  ..., 3.54290e-04, 5.47852e-01, 5.02930e-01],
         [2.12860e-02, 0.00000e+00, 1.11875e+01,  ..., 4.40836e-04, 3.92578e-01, 4.14795e-01],
         [3.07617e-02, 2.41661e-03, 1.74844e+01,  ..., 6.71864e-04, 4.12354e-01, 3.12500e-01],
         ...,
         [8.68164e-01, 9.67285e-01, 4.88500e+02,  ..., 1.03683e-02, 3.98193e-01, 4.37988e-01],
         [9.18945e-01, 9.68750e-01, 5.69000e+02,  ..., 9.26971e-03, 4.03564e-01, 4.40918e-01],
         [9.63379e-01, 9.70215e-01, 5.15000e+02,  ..., 9.12476e-03, 4.11133e-01, 3.20801e-01]],
        [[1.15356e-02, 0.00000e+00, 9.84375e+00,  ..., 4.10795e-04, 5.07324e-01, 5.14160e-01],
         [2.05688e-02, 0.00000e+00, 1.08750e+01,  ..., 5.05447e-04, 3.54736e-01, 4.33105e-01],
         [3.01056e-02, 2.10571e-03, 1.55781e+01,  ..., 7.04288e-04, 3.56201e-01, 3.30811e-01],
         ...,
         [8.64746e-01, 9.69727e-01, 4.70500e+02,  ..., 9.85718e-03, 3.93799e-01, 4.66309e-01],
         [9.14062e-01, 9.70215e-01, 5.75500e+02,  ..., 9.33838e-03, 4.03320e-01, 4.76562e-01],
         [9.61914e-01, 9.68750e-01, 5.23500e+02,  ..., 8.57544e-03, 4.27979e-01, 3.50830e-01]],
        [[1.18179e-02, 0.00000e+00, 9.55469e+00,  ..., 4.97341e-04, 4.96338e-01, 5.73730e-01],
         [2.09656e-02, 1.33038e-03, 1.07969e+01,  ..., 5.97477e-04, 3.28369e-01, 4.79248e-01],
         [3.03955e-02, 3.90053e-03, 1.67656e+01,  ..., 1.00803e-03, 3.45947e-01, 3.69629e-01],
         ...,
         [8.64746e-01, 9.66309e-01, 4.43000e+02,  ..., 1.29700e-02, 3.75488e-01, 4.15771e-01],
         [9.16504e-01, 9.63867e-01, 5.31000e+02,  ..., 1.05286e-02, 4.00635e-01, 3.97217e-01],
         [9.61914e-01, 9.68750e-01, 5.10500e+02,  ..., 1.10321e-02, 4.13086e-01, 3.07861e-01]],
        ...,
        [[1.18790e-02, 0.00000e+00, 1.21328e+01,  ..., 4.72784e-04, 5.45410e-01, 5.75195e-01],
         [2.11487e-02, 4.02927e-04, 1.27891e+01,  ..., 5.76973e-04, 3.94775e-01, 4.79736e-01],
         [3.06854e-02, 2.53868e-03, 1.75938e+01,  ..., 8.45909e-04, 4.06006e-01, 3.69385e-01],
         ...,
         [8.70117e-01, 9.67773e-01, 3.97500e+02,  ..., 9.67407e-03, 3.80859e-01, 4.76318e-01],
         [9.19434e-01, 9.67773e-01, 4.79500e+02,  ..., 8.71277e-03, 4.03076e-01, 4.41650e-01],
         [9.65820e-01, 9.69727e-01, 4.97750e+02,  ..., 8.88062e-03, 4.18701e-01, 3.06641e-01]],
        [[1.20621e-02, 0.00000e+00, 1.17500e+01,  ..., 5.46455e-04, 4.87061e-01, 6.14258e-01],
         [2.13013e-02, 1.48296e-03, 1.32812e+01,  ..., 6.61373e-04, 3.23730e-01, 5.11230e-01],
         [3.10822e-02, 3.50952e-03, 1.89375e+01,  ..., 9.07421e-04, 3.35449e-01, 3.73047e-01],
         ...,
         [8.70117e-01, 9.67285e-01, 4.48500e+02,  ..., 1.19629e-02, 4.17725e-01, 4.83154e-01],
         [9.20410e-01, 9.66309e-01, 5.64500e+02,  ..., 9.37653e-03, 4.27002e-01, 4.47998e-01],
         [9.66309e-01, 9.68750e-01, 5.41000e+02,  ..., 9.67407e-03, 4.31152e-01, 3.18359e-01]],
        [[1.30768e-02, 0.00000e+00, 1.22188e+01,  ..., 3.24965e-04, 5.16113e-01, 5.65918e-01],
         [2.25067e-02, 0.00000e+00, 1.28750e+01,  ..., 4.01258e-04, 3.77197e-01, 4.64600e-01],
         [3.29590e-02, 1.87969e-03, 1.62656e+01,  ..., 5.88417e-04, 3.68652e-01, 3.88672e-01],
         ...,
         [8.68652e-01, 9.67285e-01, 4.25000e+02,  ..., 1.15509e-02, 4.04053e-01, 4.84863e-01],
         [9.18945e-01, 9.64844e-01, 5.43500e+02,  ..., 9.59778e-03, 4.16260e-01, 4.42139e-01],
         [9.63379e-01, 9.67773e-01, 5.27000e+02,  ..., 1.00937e-02, 4.30420e-01, 3.21533e-01]]], device='cuda:0', dtype=torch.float16, grad_fn=<CopySlices>)
y_yolo size:  torch.Size([20, 25200, 7])
wh:  tensor([[[0.01611, 0.04474],
         [0.01749, 0.05591],
         [0.02731, 0.03081],
         ...,
         [0.76318, 0.84521],
         [0.88916, 0.93066],
         [0.80469, 0.78809]],
        [[0.01538, 0.04022],
         [0.01700, 0.05234],
         [0.02434, 0.02548],
         ...,
         [0.73535, 0.88135],
         [0.89941, 0.96387],
         [0.81787, 0.85791]],
        [[0.01493, 0.03717],
         [0.01688, 0.04813],
         [0.02620, 0.02673],
         ...,
         [0.69238, 0.95996],
         [0.82959, 0.99463],
         [0.79785, 0.89209]],
        ...,
        [[0.01895, 0.04401],
         [0.01999, 0.05499],
         [0.02750, 0.02994],
         ...,
         [0.62109, 0.98145],
         [0.74902, 0.99219],
         [0.77783, 0.88672]],
        [[0.01836, 0.03873],
         [0.02075, 0.05038],
         [0.02959, 0.02762],
         ...,
         [0.70068, 1.02246],
         [0.88184, 1.05957],
         [0.84521, 0.92285]],
        [[0.01909, 0.04007],
         [0.02011, 0.05170],
         [0.02542, 0.02583],
         ...,
         [0.66406, 0.98926],
         [0.84912, 1.00586],
         [0.82324, 0.89453]]], device='cuda:0', dtype=torch.float16, grad_fn=<DivBackward0>)
wh size:  torch.Size([20, 25200, 2])
conf:  tensor([[0.00035, 0.00044, 0.00067,  ..., 0.01037, 0.00927, 0.00912],
        [0.00041, 0.00051, 0.00070,  ..., 0.00986, 0.00934, 0.00858],
        [0.00050, 0.00060, 0.00101,  ..., 0.01297, 0.01053, 0.01103],
        ...,
        [0.00047, 0.00058, 0.00085,  ..., 0.00967, 0.00871, 0.00888],
        [0.00055, 0.00066, 0.00091,  ..., 0.01196, 0.00938, 0.00967],
        [0.00032, 0.00040, 0.00059,  ..., 0.01155, 0.00960, 0.01009]], device='cuda:0', dtype=torch.float16, grad_fn=<SelectBackward0>)
conf size:  torch.Size([20, 25200])
p:  tensor([[0.00035, 0.00044, 0.00067,  ..., 0.01037, 0.00927, 0.00912],
        [0.00041, 0.00051, 0.00070,  ..., 0.00986, 0.00934, 0.00858],
        [0.00050, 0.00060, 0.00101,  ..., 0.01297, 0.01053, 0.01103],
        ...,
        [0.00047, 0.00058, 0.00085,  ..., 0.00967, 0.00871, 0.00888],
        [0.00055, 0.00066, 0.00091,  ..., 0.01196, 0.00938, 0.00967],
        [0.00032, 0.00040, 0.00059,  ..., 0.01155, 0.00960, 0.01009]], device='cuda:0', dtype=torch.float16, grad_fn=<SelectBackward0>)
p size:  torch.Size([20, 25200])
sigma_t:  tensor([[[0.54785, 0.50293],
         [0.39258, 0.41479],
         [0.41235, 0.31250],
         ...,
         [0.39819, 0.43799],
         [0.40356, 0.44092],
         [0.41113, 0.32080]],
        [[0.50732, 0.51416],
         [0.35474, 0.43311],
         [0.35620, 0.33081],
         ...,
         [0.39380, 0.46631],
         [0.40332, 0.47656],
         [0.42798, 0.35083]],
        [[0.49634, 0.57373],
         [0.32837, 0.47925],
         [0.34595, 0.36963],
         ...,
         [0.37549, 0.41577],
         [0.40063, 0.39722],
         [0.41309, 0.30786]],
        ...,
        [[0.54541, 0.57520],
         [0.39478, 0.47974],
         [0.40601, 0.36938],
         ...,
         [0.38086, 0.47632],
         [0.40308, 0.44165],
         [0.41870, 0.30664]],
        [[0.48706, 0.61426],
         [0.32373, 0.51123],
         [0.33545, 0.37305],
         ...,
         [0.41772, 0.48315],
         [0.42700, 0.44800],
         [0.43115, 0.31836]],
        [[0.51611, 0.56592],
         [0.37720, 0.46460],
         [0.36865, 0.38867],
         ...,
         [0.40405, 0.48486],
         [0.41626, 0.44214],
         [0.43042, 0.32153]]], device='cuda:0', dtype=torch.float16, grad_fn=<SliceBackward0>)
sigma_t size:  torch.Size([20, 25200, 2])
sigma_prime_t:  tensor([[[0.52138, 0.47862],
         [0.48624, 0.51376],
         [0.56888, 0.43112],
         ...,
         [0.47620, 0.52380],
         [0.47788, 0.52212],
         [0.56171, 0.43829]],
        [[0.49665, 0.50335],
         [0.45026, 0.54974],
         [0.51848, 0.48152],
         ...,
         [0.45785, 0.54215],
         [0.45838, 0.54162],
         [0.54953, 0.45047]],
        [[0.46384, 0.53616],
         [0.40659, 0.59341],
         [0.48345, 0.51655],
         ...,
         [0.47454, 0.52546],
         [0.50214, 0.49786],
         [0.57298, 0.42702]],
        ...,
        [[0.48671, 0.51329],
         [0.45142, 0.54858],
         [0.52361, 0.47639],
         ...,
         [0.44432, 0.55568],
         [0.47717, 0.52283],
         [0.57725, 0.42275]],
        [[0.44225, 0.55775],
         [0.38772, 0.61228],
         [0.47347, 0.52653],
         ...,
         [0.46369, 0.53631],
         [0.48800, 0.51200],
         [0.57524, 0.42476]],
        [[0.47699, 0.52301],
         [0.44809, 0.55191],
         [0.48678, 0.51322],
         ...,
         [0.45455, 0.54545],
         [0.48493, 0.51507],
         [0.57240, 0.42760]]], device='cuda:0', grad_fn=<DivBackward0>)
sigma_prime_t size:  torch.Size([20, 25200, 2])
class_prob:  tensor([[[0.00018, 0.00017],
         [0.00021, 0.00023],
         [0.00038, 0.00029],
         ...,
         [0.00494, 0.00543],
         [0.00443, 0.00484],
         [0.00513, 0.00400]],
        [[0.00020, 0.00021],
         [0.00023, 0.00028],
         [0.00037, 0.00034],
         ...,
         [0.00451, 0.00534],
         [0.00428, 0.00506],
         [0.00471, 0.00386]],
        [[0.00023, 0.00027],
         [0.00024, 0.00035],
         [0.00049, 0.00052],
         ...,
         [0.00615, 0.00682],
         [0.00529, 0.00524],
         [0.00632, 0.00471]],
        ...,
        [[0.00023, 0.00024],
         [0.00026, 0.00032],
         [0.00044, 0.00040],
         ...,
         [0.00430, 0.00538],
         [0.00416, 0.00456],
         [0.00513, 0.00375]],
        [[0.00024, 0.00030],
         [0.00026, 0.00040],
         [0.00043, 0.00048],
         ...,
         [0.00555, 0.00642],
         [0.00458, 0.00480],
         [0.00556, 0.00411]],
        [[0.00016, 0.00017],
         [0.00018, 0.00022],
         [0.00029, 0.00030],
         ...,
         [0.00525, 0.00630],
         [0.00465, 0.00494],
         [0.00578, 0.00432]]], device='cuda:0', grad_fn=<MulBackward0>)
class_prob size:  torch.Size([20, 25200, 2])
bkgd_prob:  tensor([[0.99951, 0.99951, 0.99951,  ..., 0.98975, 0.99072, 0.99072],
        [0.99951, 0.99951, 0.99951,  ..., 0.99023, 0.99072, 0.99121],
        [0.99951, 0.99951, 0.99902,  ..., 0.98682, 0.98926, 0.98877],
        ...,
        [0.99951, 0.99951, 0.99902,  ..., 0.99023, 0.99121, 0.99121],
        [0.99951, 0.99951, 0.99902,  ..., 0.98828, 0.99072, 0.99023],
        [0.99951, 0.99951, 0.99951,  ..., 0.98828, 0.99023, 0.98975]], device='cuda:0', dtype=torch.float16, grad_fn=<RsubBackward1>)
bkgd_prob size:  torch.Size([20, 25200])
bcc_prob:  tensor([[[1.84718e-04, 1.69572e-04, 9.99512e-01],
         [2.14353e-04, 2.26483e-04, 9.99512e-01],
         [3.82209e-04, 2.89655e-04, 9.99512e-01],
         ...,
         [4.93745e-03, 5.43089e-03, 9.89746e-01],
         [4.42985e-03, 4.83987e-03, 9.90723e-01],
         [5.12545e-03, 3.99931e-03, 9.90723e-01]],
        [[2.04023e-04, 2.06772e-04, 9.99512e-01],
         [2.27584e-04, 2.77863e-04, 9.99512e-01],
         [3.65159e-04, 3.39130e-04, 9.99512e-01],
         ...,
         [4.51309e-03, 5.34408e-03, 9.90234e-01],
         [4.28052e-03, 5.05786e-03, 9.90723e-01],
         [4.71246e-03, 3.86298e-03, 9.91211e-01]],
        [[2.30686e-04, 2.66656e-04, 9.99512e-01],
         [2.42928e-04, 3.54549e-04, 9.99512e-01],
         [4.87337e-04, 5.20697e-04, 9.99023e-01],
         ...,
         [6.15483e-03, 6.81514e-03, 9.86816e-01],
         [5.28683e-03, 5.24173e-03, 9.89258e-01],
         [6.32114e-03, 4.71097e-03, 9.88770e-01]],
        ...,
        [[2.30109e-04, 2.42675e-04, 9.99512e-01],
         [2.60459e-04, 3.16514e-04, 9.99512e-01],
         [4.42930e-04, 4.02979e-04, 9.99023e-01],
         ...,
         [4.29836e-03, 5.37571e-03, 9.90234e-01],
         [4.15745e-03, 4.55532e-03, 9.91211e-01],
         [5.12631e-03, 3.75431e-03, 9.91211e-01]],
        [[2.41671e-04, 3.04784e-04, 9.99512e-01],
         [2.56427e-04, 4.04946e-04, 9.99512e-01],
         [4.29634e-04, 4.77788e-04, 9.99023e-01],
         ...,
         [5.54702e-03, 6.41587e-03, 9.88281e-01],
         [4.57577e-03, 4.80076e-03, 9.90723e-01],
         [5.56496e-03, 4.10912e-03, 9.90234e-01]],
        [[1.55003e-04, 1.69961e-04, 9.99512e-01],
         [1.79798e-04, 2.21460e-04, 9.99512e-01],
         [2.86431e-04, 3.01986e-04, 9.99512e-01],
         ...,
         [5.25041e-03, 6.30049e-03, 9.88281e-01],
         [4.65421e-03, 4.94357e-03, 9.90234e-01],
         [5.77765e-03, 4.31604e-03, 9.89746e-01]]], device='cuda:0', grad_fn=<CatBackward0>)
bcc_prob size:  torch.Size([20, 25200, 3])
Minimum probs (c1, c2, bkgd): [1e-05, 1.4e-05, 0.890137]

  0%|          | 0/4 [00:01<?, ?it/s]