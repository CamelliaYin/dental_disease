Overriding model.yaml nc=80 with nc=2
                 from  n    params  module                                  arguments
  0                -1  1      3520  models.common.Conv                      [3, 32, 6, 2, 2]
  1                -1  1     18560  models.common.Conv                      [32, 64, 3, 2]
  2                -1  1     18816  models.common.C3                        [64, 64, 1]
  3                -1  1     73984  models.common.Conv                      [64, 128, 3, 2]
  4                -1  2    115712  models.common.C3                        [128, 128, 2]
  5                -1  1    295424  models.common.Conv                      [128, 256, 3, 2]
  6                -1  3    625152  models.common.C3                        [256, 256, 3]
  7                -1  1   1180672  models.common.Conv                      [256, 512, 3, 2]
  8                -1  1   1182720  models.common.C3                        [512, 512, 1]
  9                -1  1    656896  models.common.SPPF                      [512, 512, 5]
 10                -1  1    131584  models.common.Conv                      [512, 256, 1, 1]
 11                -1  1         0  torch.nn.modules.upsampling.Upsample    [None, 2, 'nearest']
 12           [-1, 6]  1         0  models.common.Concat                    [1]
 13                -1  1    361984  models.common.C3                        [512, 256, 1, False]
 14                -1  1     33024  models.common.Conv                      [256, 128, 1, 1]
 15                -1  1         0  torch.nn.modules.upsampling.Upsample    [None, 2, 'nearest']
 16           [-1, 4]  1         0  models.common.Concat                    [1]
 17                -1  1     90880  models.common.C3                        [256, 128, 1, False]
 18                -1  1    147712  models.common.Conv                      [128, 128, 3, 2]
 19          [-1, 14]  1         0  models.common.Concat                    [1]
 20                -1  1    296448  models.common.C3                        [256, 256, 1, False]
 21                -1  1    590336  models.common.Conv                      [256, 256, 3, 2]
 22          [-1, 10]  1         0  models.common.Concat                    [1]
 23                -1  1   1182720  models.common.C3                        [512, 512, 1, False]
 24      [17, 20, 23]  1     18879  models.yolo.Detect                      [2, [[10, 13, 16, 30, 33, 23], [30, 61, 62, 45, 59, 119], [116, 90, 156, 198, 373, 326]], [128, 256, 512]]
Model Summary: 270 layers, 7025023 parameters, 7025023 gradients, 15.9 GFLOPs
Transferred 344/350 items from yolov5s.pt
Scaled weight_decay = 0.00046875
[34m[1moptimizer:[39m[22m SGD with parameter groups 57 weight, 60 weight (no decay), 60 bias
[34m[1mtrain: [39m[22mScanning '..\data\datasets\bcc-tvt\labels\train.cache' images and labels... 70 found, 0 missing, 3 empty, 0 corrupted: 100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 70/70 [00:00<?, ?it/s]
Augmentation is:  False
[34m[1mval: [39m[22mScanning '..\data\datasets\iid-tvt\labels\val.cache' images and labels... 67 found, 13 missing, 0 empty, 0 corrupted: 100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 80/80 [00:00<?, ?it/s]
Plotting labels...
[34m[1mautoanchor: [39m[22mAnalyzing anchors... anchors/target = 6.02, Best Possible Recall (BPR) = 1.0000
Image sizes 640 train, 640 val
Using 8 dataloader workers
Logging results to [1mruns\train\test
Starting training for 25 epochs...
     Epoch   gpu_mem       box       obj       cls    labels  img_size
YOLO+BCC

      0/24     11.8G         0   0.02267         0       218       640:   0%|          | 0/4 [00:00<?, ?it/s]
target_volunteers_bcc:  tensor([[[2., 2., 2., 2.],
         [2., 2., 2., 2.],
         [2., 2., 2., 2.],
         ...,
         [2., 2., 2., 2.],
         [2., 2., 2., 2.],
         [2., 2., 2., 2.]],
        [[2., 2., 2., 2.],
         [2., 2., 2., 2.],
         [2., 2., 2., 2.],
         ...,
         [2., 2., 2., 2.],
         [2., 2., 2., 2.],
         [2., 2., 2., 2.]],
        [[2., 2., 2., 2.],
         [2., 2., 2., 2.],
         [2., 2., 2., 2.],
         ...,
         [2., 2., 2., 2.],
         [2., 2., 2., 2.],
         [2., 2., 2., 2.]],
        ...,
        [[2., 2., 2., 2.],
         [2., 2., 2., 2.],
         [2., 2., 2., 2.],
         ...,
         [2., 2., 2., 2.],
         [2., 2., 2., 2.],
         [2., 2., 2., 2.]],
        [[2., 2., 2., 2.],
         [2., 2., 2., 2.],
         [2., 2., 2., 2.],
         ...,
         [2., 2., 2., 2.],
         [2., 2., 2., 2.],
         [2., 2., 2., 2.]],
        [[2., 2., 2., 2.],
         [2., 2., 2., 2.],
         [2., 2., 2., 2.],
         ...,
         [2., 2., 2., 2.],
         [2., 2., 2., 2.],
         [2., 2., 2., 2.]]], device='cuda:0')
target_volunteers_bcc size:  torch.Size([20, 25200, 4])
batch_pred_bcc:  tensor([[[-7.53369e+00, -7.49602e+00, -9.77040e-04],
         [-7.43914e+00, -7.26218e+00, -1.46592e-03],
         [-6.91719e+00, -7.23190e+00, -1.95503e-03],
         ...,
         [-5.46102e+00, -5.42040e+00, -8.82791e-03],
         [-5.65790e+00, -5.66413e+00, -6.85941e-03],
         [-5.39471e+00, -5.78739e+00, -7.84318e-03]],
        [[-8.49728e+00, -8.48389e+00, -4.88401e-04],
         [-8.38792e+00, -8.18844e+00, -4.88401e-04],
         [-7.91622e+00, -7.98801e+00, -4.88401e-04],
         ...,
         [-5.40437e+00, -5.23588e+00, -9.81362e-03],
         [-5.45777e+00, -5.29091e+00, -9.32065e-03],
         [-5.35755e+00, -5.55632e+00, -8.82791e-03]],
        [[-8.04109e+00, -8.04910e+00, -4.88401e-04],
         [-7.91541e+00, -7.77460e+00, -9.77040e-04],
         [-7.39657e+00, -7.67498e+00, -9.77040e-04],
         ...,
         [-5.30835e+00, -5.12397e+00, -1.08003e-02],
         [-5.51230e+00, -5.36532e+00, -8.82791e-03],
         [-5.29963e+00, -5.51536e+00, -8.82791e-03]],
        ...,
        [[-8.36849e+00, -8.31616e+00, -4.88401e-04],
         [-8.24956e+00, -8.05351e+00, -4.88401e-04],
         [-7.72213e+00, -7.81660e+00, -9.77040e-04],
         ...,
         [-5.44981e+00, -5.22564e+00, -9.81362e-03],
         [-5.48314e+00, -5.39120e+00, -8.82791e-03],
         [-5.27362e+00, -5.58451e+00, -8.82791e-03]],
        [[-8.77116e+00, -8.68077e+00, -4.88401e-04],
         [-8.61881e+00, -8.41170e+00, -4.88401e-04],
         [-8.15801e+00, -8.10513e+00, -4.88401e-04],
         ...,
         [-5.25375e+00, -5.07082e+00, -1.17880e-02],
         [-5.37029e+00, -5.30938e+00, -9.81362e-03],
         [-5.15335e+00, -5.44596e+00, -1.03068e-02]],
        [[-7.85291e+00, -7.87147e+00, -9.77040e-04],
         [-7.76009e+00, -7.62488e+00, -9.77040e-04],
         [-7.37161e+00, -7.48861e+00, -9.77040e-04],
         ...,
         [-5.30577e+00, -5.06267e+00, -1.12940e-02],
         [-5.45529e+00, -5.31449e+00, -9.32065e-03],
         [-5.23366e+00, -5.48480e+00, -9.32065e-03]]], device='cuda:0', grad_fn=<LogBackward0>)
batch_pred_bcc.size():  torch.Size([20, 25200, 3])
batch_pcm['variational']:  tensor([[[1.10000, 1.10000, 1.10000, 1.10000],
         [1.00000, 1.00000, 1.00000, 1.00000],
         [1.00000, 1.00000, 1.00000, 1.00000]],
        [[1.00000, 1.00000, 1.00000, 1.00000],
         [1.10000, 1.10000, 1.10000, 1.10000],
         [1.00000, 1.00000, 1.00000, 1.00000]],
        [[1.00000, 1.00000, 1.00000, 1.00000],
         [1.00000, 1.00000, 1.00000, 1.00000],
         [1.10000, 1.10000, 1.10000, 1.10000]]], device='cuda:0', dtype=torch.float64)
batch_pcm['variational'].size():  torch.Size([3, 3, 4])
batch_pcm['prior']:  tensor([[[1.10000, 1.10000, 1.10000, 1.10000],
         [1.00000, 1.00000, 1.00000, 1.00000],
         [1.00000, 1.00000, 1.00000, 1.00000]],
        [[1.00000, 1.00000, 1.00000, 1.00000],
         [1.10000, 1.10000, 1.10000, 1.10000],
         [1.00000, 1.00000, 1.00000, 1.00000]],
        [[1.00000, 1.00000, 1.00000, 1.00000],
         [1.00000, 1.00000, 1.00000, 1.00000],
         [1.10000, 1.10000, 1.10000, 1.10000]]], device='cuda:0', dtype=torch.float64)
batch_pcm['prior'].size():  torch.Size([3, 3, 4])
batch_qtargets tensor([[[2.89560e-04, 3.00676e-04, 9.99410e-01],
         [3.18395e-04, 3.80033e-04, 9.99302e-01],
         [5.36734e-04, 3.91816e-04, 9.99071e-01],
         ...,
         [2.30943e-03, 2.40516e-03, 9.95285e-01],
         [1.89475e-03, 1.88299e-03, 9.96222e-01],
         [2.46676e-03, 1.66566e-03, 9.95867e-01]],
        [[1.10460e-04, 1.11949e-04, 9.99778e-01],
         [1.23219e-04, 1.50422e-04, 9.99726e-01],
         [1.97464e-04, 1.83785e-04, 9.99619e-01],
         ...,
         [2.44491e-03, 2.89357e-03, 9.94662e-01],
         [2.31727e-03, 2.73809e-03, 9.94945e-01],
         [2.56132e-03, 2.09961e-03, 9.95339e-01]],
        [[1.74289e-04, 1.72900e-04, 9.99653e-01],
         [1.97712e-04, 2.27607e-04, 9.99575e-01],
         [3.32119e-04, 2.51408e-04, 9.99416e-01],
         ...,
         [2.69234e-03, 3.23747e-03, 9.94070e-01],
         [2.19392e-03, 2.54130e-03, 9.95265e-01],
         [2.71340e-03, 2.18687e-03, 9.95100e-01]],
        ...,
        [[1.25639e-04, 1.32388e-04, 9.99742e-01],
         [1.41498e-04, 1.72144e-04, 9.99686e-01],
         [2.39861e-04, 2.18239e-04, 9.99542e-01],
         ...,
         [2.33648e-03, 2.92360e-03, 9.94740e-01],
         [2.25884e-03, 2.47638e-03, 9.95265e-01],
         [2.78511e-03, 2.04089e-03, 9.95174e-01]],
        [[8.40002e-05, 9.19473e-05, 9.99824e-01],
         [9.78199e-05, 1.20330e-04, 9.99782e-01],
         [1.55062e-04, 1.63483e-04, 9.99681e-01],
         ...,
         [2.84530e-03, 3.41643e-03, 9.93738e-01],
         [2.52997e-03, 2.68884e-03, 9.94781e-01],
         [3.14359e-03, 2.34609e-03, 9.94510e-01]],
        [[2.10464e-04, 2.06595e-04, 9.99583e-01],
         [2.30918e-04, 2.64349e-04, 9.99505e-01],
         [3.40492e-04, 3.02898e-04, 9.99357e-01],
         ...,
         [2.70006e-03, 3.44310e-03, 9.93857e-01],
         [2.32317e-03, 2.67442e-03, 9.95002e-01],
         [2.89912e-03, 2.25526e-03, 9.94846e-01]]], device='cuda:0')
batch_qtargets size torch.Size([20, 25200, 3])

