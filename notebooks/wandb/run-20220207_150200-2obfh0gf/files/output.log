Overriding model.yaml nc=80 with nc=3
                 from  n    params  module                                  arguments
  0                -1  1      3520  models.common.Conv                      [3, 32, 6, 2, 2]
  1                -1  1     18560  models.common.Conv                      [32, 64, 3, 2]
  2                -1  1     18816  models.common.C3                        [64, 64, 1]
  3                -1  1     73984  models.common.Conv                      [64, 128, 3, 2]
  4                -1  2    115712  models.common.C3                        [128, 128, 2]
  5                -1  1    295424  models.common.Conv                      [128, 256, 3, 2]
  6                -1  3    625152  models.common.C3                        [256, 256, 3]
  7                -1  1   1180672  models.common.Conv                      [256, 512, 3, 2]
  8                -1  1   1182720  models.common.C3                        [512, 512, 1]
  9                -1  1    656896  models.common.SPPF                      [512, 512, 5]
 10                -1  1    131584  models.common.Conv                      [512, 256, 1, 1]
 11                -1  1         0  torch.nn.modules.upsampling.Upsample    [None, 2, 'nearest']
 12           [-1, 6]  1         0  models.common.Concat                    [1]
 13                -1  1    361984  models.common.C3                        [512, 256, 1, False]
 14                -1  1     33024  models.common.Conv                      [256, 128, 1, 1]
 15                -1  1         0  torch.nn.modules.upsampling.Upsample    [None, 2, 'nearest']
 16           [-1, 4]  1         0  models.common.Concat                    [1]
 17                -1  1     90880  models.common.C3                        [256, 128, 1, False]
 18                -1  1    147712  models.common.Conv                      [128, 128, 3, 2]
 19          [-1, 14]  1         0  models.common.Concat                    [1]
 20                -1  1    296448  models.common.C3                        [256, 256, 1, False]
 21                -1  1    590336  models.common.Conv                      [256, 256, 3, 2]
 22          [-1, 10]  1         0  models.common.Concat                    [1]
 23                -1  1   1182720  models.common.C3                        [512, 512, 1, False]
 24      [17, 20, 23]  1     21576  models.yolo.Detect                      [3, [[10, 13, 16, 30, 33, 23], [30, 61, 62, 45, 59, 119], [116, 90, 156, 198, 373, 326]], [128, 256, 512]]
C:\Users\rb01243\Anaconda3\lib\site-packages\torch\functional.py:445: UserWarning: torch.meshgrid: in an upcoming release, it will be required to pass the indexing argument. (Triggered internally at  ..\aten\src\ATen\native\TensorShape.cpp:2157.)
  return _VF.meshgrid(tensors, **kwargs)  # type: ignore[attr-defined]
Model Summary: 270 layers, 7027720 parameters, 7027720 gradients, 15.9 GFLOPs
Transferred 344/350 items from yolov5s.pt
Scaled weight_decay = 0.00046875
[34m[1moptimizer:[39m[22m SGD with parameter groups 57 weight, 60 weight (no decay), 60 bias


[34m[1mtrain: [39m[22mScanning '..\data\datasets\All_Volunteers_Crowdsourced\labels\train' images and labels...2102 found, 0 missing, 0 empty, 0 corrupted: 100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 2102/2102 [00:07<00:00, 294.16it/s]
[34m[1mtrain: [39m[22mWARNING: Cache directory ..\data\datasets\All_Volunteers_Crowdsourced\labels is not writeable: [WinError 183] Cannot create a file when that file already exists: '..\\data\\datasets\\All_Volunteers_Crowdsourced\\labels\\train.cache.npy' -> '..\\data\\datasets\\All_Volunteers_Crowdsourced\\labels\\train.cache'
[34m[1mval: [39m[22mScanning '..\data\datasets\All_Volunteers_IID\labels\val' images and labels...860 found, 0 missing, 0 empty, 2 corrupted: 100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 860/860 [00:04<00:00, 175.26it/s]
[34m[1mval: [39m[22mWARNING: Ignoring corrupted image and/or label ..\data\datasets\All_Volunteers_IID\images\val\Unknown-X-20191113-153036-XKNMQ7OPXKU-3.9c62fc6bf51ff6f1eafe.JPG: non-normalized or out of bounds coordinate labels
[34m[1mval: [39m[22mWARNING: Ignoring corrupted image and/or label ..\data\datasets\All_Volunteers_IID\images\val\Unknown-X-20191113-153036-XKNMQ7OPXKU-3.1f089314ef9273e4647b.JPG: non-normalized or out of bounds coordinate labels
[34m[1mval: [39m[22mWARNING: Cache directory ..\data\datasets\All_Volunteers_IID\labels is not writeable: [WinError 183] Cannot create a file when that file already exists: '..\\data\\datasets\\All_Volunteers_IID\\labels\\val.cache.npy' -> '..\\data\\datasets\\All_Volunteers_IID\\labels\\val.cache'
Plotting labels...
[34m[1mautoanchor: [39m[22mAnalyzing anchors... anchors/target = 5.24, Best Possible Recall (BPR) = 0.9989
Image sizes 640 train, 640 val
Using 8 dataloader workers
Logging results to [1mruns\train\LargeDS_cyolo16
Starting training for 10 epochs...
     Epoch   gpu_mem       box       obj       cls    labels  img_size
YOLO+BCC
  0%|          | 0/106 [00:00<?, ?it/s]
target_volunteers_bcc:  tensor([[[2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.],
         ...,
         [2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.]],
        [[2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.],
         ...,
         [2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.]],
        [[2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.],
         ...,
         [2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.]],
        ...,
        [[2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.],
         ...,
         [2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.]],
        [[2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.],
         ...,
         [2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.]],
        [[2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.],
         ...,
         [2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.],
         [2., 2., 2.,  ..., 2., 2., 2.]]])
target_volunteers_bcc size:  torch.Size([20, 25200, 505])
batch_pred_bcc:  tensor([[[-8.27559e+00, -8.20888e+00, -1.06431e+01, -4.88401e-04],
         [-8.22435e+00, -7.99458e+00, -9.69999e+00, -4.88401e-04],
         [-7.78300e+00, -7.84728e+00, -9.04510e+00, -9.77040e-04],
         ...,
         [-4.88889e+00, -4.69101e+00, -4.52076e+00, -2.77245e-02],
         [-4.81139e+00, -4.49259e+00, -4.46853e+00, -3.12448e-02],
         [-4.60498e+00, -4.62316e+00, -4.52391e+00, -3.12448e-02]],
        [[-8.63525e+00, -8.61179e+00, -1.09670e+01, -4.88401e-04],
         [-8.55934e+00, -8.34640e+00, -1.00361e+01, -4.88401e-04],
         [-8.02806e+00, -8.15195e+00, -9.34875e+00, -4.88401e-04],
         ...,
         [-4.74911e+00, -4.81655e+00, -4.59509e+00, -2.72227e-02],
         [-4.69319e+00, -4.61936e+00, -4.53822e+00, -3.02377e-02],
         [-4.47281e+00, -4.72375e+00, -4.60143e+00, -3.07411e-02]],
        [[-8.47399e+00, -8.39243e+00, -1.08575e+01, -4.88401e-04],
         [-8.37466e+00, -8.13364e+00, -9.89448e+00, -4.88401e-04],
         [-7.92272e+00, -7.97172e+00, -9.17957e+00, -9.77040e-04],
         ...,
         [-5.05054e+00, -4.99181e+00, -4.69680e+00, -2.27170e-02],
         [-4.90272e+00, -4.62583e+00, -4.49546e+00, -2.87291e-02],
         [-4.65394e+00, -4.72063e+00, -4.56249e+00, -2.92317e-02]],
        ...,
        [[-8.57508e+00, -8.53496e+00, -1.11346e+01, -4.88401e-04],
         [-8.47574e+00, -8.26429e+00, -1.01906e+01, -4.88401e-04],
         [-7.86412e+00, -7.89145e+00, -9.30426e+00, -9.77040e-04],
         ...,
         [-4.57876e+00, -4.54452e+00, -4.38746e+00, -3.37669e-02],
         [-4.60426e+00, -4.43136e+00, -4.42815e+00, -3.42720e-02],
         [-4.48789e+00, -4.66451e+00, -4.54288e+00, -3.17487e-02]],
        [[-8.53824e+00, -8.56732e+00, -1.10941e+01, -4.88401e-04],
         [-8.46536e+00, -8.28683e+00, -1.01596e+01, -4.88401e-04],
         [-7.85372e+00, -7.93342e+00, -9.32651e+00, -9.77040e-04],
         ...,
         [-4.89248e+00, -4.82690e+00, -4.51491e+00, -2.67210e-02],
         [-4.78008e+00, -4.59481e+00, -4.42261e+00, -3.07411e-02],
         [-4.53163e+00, -4.73934e+00, -4.46955e+00, -3.12448e-02]],
        [[-8.37723e+00, -8.47461e+00, -1.06769e+01, -4.88401e-04],
         [-8.30738e+00, -8.24653e+00, -9.76984e+00, -4.88401e-04],
         [-7.88684e+00, -8.12902e+00, -9.18156e+00, -9.77040e-04],
         ...,
         [-4.80832e+00, -4.98895e+00, -4.71765e+00, -2.42167e-02],
         [-4.66455e+00, -4.71392e+00, -4.56446e+00, -2.92317e-02],
         [-4.45180e+00, -4.84229e+00, -4.60573e+00, -2.97346e-02]]], device='cuda:0', grad_fn=<LogBackward0>)
batch_pred_bcc.size():  torch.Size([20, 25200, 4])
batch_pcm['variational']:  tensor([[[1.10000, 1.10000, 1.10000,  ..., 1.10000, 1.10000, 1.10000],
         [1.00000, 1.00000, 1.00000,  ..., 1.00000, 1.00000, 1.00000],
         [1.00000, 1.00000, 1.00000,  ..., 1.00000, 1.00000, 1.00000],
         [1.00000, 1.00000, 1.00000,  ..., 1.00000, 1.00000, 1.00000]],
        [[1.00000, 1.00000, 1.00000,  ..., 1.00000, 1.00000, 1.00000],
         [1.10000, 1.10000, 1.10000,  ..., 1.10000, 1.10000, 1.10000],
         [1.00000, 1.00000, 1.00000,  ..., 1.00000, 1.00000, 1.00000],
         [1.00000, 1.00000, 1.00000,  ..., 1.00000, 1.00000, 1.00000]],
        [[1.00000, 1.00000, 1.00000,  ..., 1.00000, 1.00000, 1.00000],
         [1.00000, 1.00000, 1.00000,  ..., 1.00000, 1.00000, 1.00000],
         [1.10000, 1.10000, 1.10000,  ..., 1.10000, 1.10000, 1.10000],
         [1.00000, 1.00000, 1.00000,  ..., 1.00000, 1.00000, 1.00000]],
        [[1.00000, 1.00000, 1.00000,  ..., 1.00000, 1.00000, 1.00000],
         [1.00000, 1.00000, 1.00000,  ..., 1.00000, 1.00000, 1.00000],
         [1.00000, 1.00000, 1.00000,  ..., 1.00000, 1.00000, 1.00000],
         [1.10000, 1.10000, 1.10000,  ..., 1.10000, 1.10000, 1.10000]]], device='cuda:0', dtype=torch.float64)
batch_pcm['variational'].size():  torch.Size([4, 4, 505])
batch_pcm['prior']:  tensor([[[1.10000, 1.10000, 1.10000,  ..., 1.10000, 1.10000, 1.10000],
         [1.00000, 1.00000, 1.00000,  ..., 1.00000, 1.00000, 1.00000],
         [1.00000, 1.00000, 1.00000,  ..., 1.00000, 1.00000, 1.00000],
         [1.00000, 1.00000, 1.00000,  ..., 1.00000, 1.00000, 1.00000]],
        [[1.00000, 1.00000, 1.00000,  ..., 1.00000, 1.00000, 1.00000],
         [1.10000, 1.10000, 1.10000,  ..., 1.10000, 1.10000, 1.10000],
         [1.00000, 1.00000, 1.00000,  ..., 1.00000, 1.00000, 1.00000],
         [1.00000, 1.00000, 1.00000,  ..., 1.00000, 1.00000, 1.00000]],
        [[1.00000, 1.00000, 1.00000,  ..., 1.00000, 1.00000, 1.00000],
         [1.00000, 1.00000, 1.00000,  ..., 1.00000, 1.00000, 1.00000],
         [1.10000, 1.10000, 1.10000,  ..., 1.10000, 1.10000, 1.10000],
         [1.00000, 1.00000, 1.00000,  ..., 1.00000, 1.00000, 1.00000]],
        [[1.00000, 1.00000, 1.00000,  ..., 1.00000, 1.00000, 1.00000],
         [1.00000, 1.00000, 1.00000,  ..., 1.00000, 1.00000, 1.00000],
         [1.00000, 1.00000, 1.00000,  ..., 1.00000, 1.00000, 1.00000],
         [1.10000, 1.10000, 1.10000,  ..., 1.10000, 1.10000, 1.10000]]], device='cuda:0', dtype=torch.float64)

  0%|          | 0/106 [00:23<?, ?it/s]