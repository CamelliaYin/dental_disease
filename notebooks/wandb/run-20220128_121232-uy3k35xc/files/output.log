Overriding model.yaml nc=80 with nc=2
                 from  n    params  module                                  arguments
  0                -1  1      3520  models.common.Conv                      [3, 32, 6, 2, 2]
  1                -1  1     18560  models.common.Conv                      [32, 64, 3, 2]
  2                -1  1     18816  models.common.C3                        [64, 64, 1]
  3                -1  1     73984  models.common.Conv                      [64, 128, 3, 2]
  4                -1  2    115712  models.common.C3                        [128, 128, 2]
  5                -1  1    295424  models.common.Conv                      [128, 256, 3, 2]
  6                -1  3    625152  models.common.C3                        [256, 256, 3]
  7                -1  1   1180672  models.common.Conv                      [256, 512, 3, 2]
  8                -1  1   1182720  models.common.C3                        [512, 512, 1]
  9                -1  1    656896  models.common.SPPF                      [512, 512, 5]
 10                -1  1    131584  models.common.Conv                      [512, 256, 1, 1]
 11                -1  1         0  torch.nn.modules.upsampling.Upsample    [None, 2, 'nearest']
 12           [-1, 6]  1         0  models.common.Concat                    [1]
 13                -1  1    361984  models.common.C3                        [512, 256, 1, False]
 14                -1  1     33024  models.common.Conv                      [256, 128, 1, 1]
 15                -1  1         0  torch.nn.modules.upsampling.Upsample    [None, 2, 'nearest']
 16           [-1, 4]  1         0  models.common.Concat                    [1]
 17                -1  1     90880  models.common.C3                        [256, 128, 1, False]
 18                -1  1    147712  models.common.Conv                      [128, 128, 3, 2]
 19          [-1, 14]  1         0  models.common.Concat                    [1]
 20                -1  1    296448  models.common.C3                        [256, 256, 1, False]
 21                -1  1    590336  models.common.Conv                      [256, 256, 3, 2]
 22          [-1, 10]  1         0  models.common.Concat                    [1]
 23                -1  1   1182720  models.common.C3                        [512, 512, 1, False]
 24      [17, 20, 23]  1     18879  models.yolo.Detect                      [2, [[10, 13, 16, 30, 33, 23], [30, 61, 62, 45, 59, 119], [116, 90, 156, 198, 373, 326]], [128, 256, 512]]
C:\Users\rb01243\Anaconda3\lib\site-packages\torch\functional.py:445: UserWarning: torch.meshgrid: in an upcoming release, it will be required to pass the indexing argument. (Triggered internally at  ..\aten\src\ATen\native\TensorShape.cpp:2157.)
  return _VF.meshgrid(tensors, **kwargs)  # type: ignore[attr-defined]
Model Summary: 270 layers, 7025023 parameters, 7025023 gradients, 15.9 GFLOPs
Transferred 344/350 items from yolov5s.pt
Scaled weight_decay = 0.00046875
[34m[1moptimizer:[39m[22m SGD with parameter groups 57 weight, 60 weight (no decay), 60 bias
[34m[1mtrain: [39m[22mScanning '..\data\datasets\bcc-tvt\labels\train.cache' images and labels... 70 found, 0 missing, 3 empty, 0 corrupted: 100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 70/70 [00:00<?, ?it/s]
[34m[1mval: [39m[22mScanning '..\data\datasets\iid-tvt\labels\val.cache' images and labels... 67 found, 13 missing, 0 empty, 0 corrupted: 100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 80/80 [00:00<?, ?it/s]
Plotting labels...
[34m[1mautoanchor: [39m[22mAnalyzing anchors... anchors/target = 6.03, Best Possible Recall (BPR) = 1.0000
Image sizes 640 train, 640 val
Using 8 dataloader workers
Logging results to [1mruns\train\test209947
Starting training for 80 epochs...
     Epoch   gpu_mem       box       obj       cls    labels  img_size
YOLO+BCC
  0%|          | 0/4 [00:00<?, ?it/s]
Minimum probs (c1, c2, bkgd): [1e-05, 1.4e-05, 0.890137]
Maximum probs (c1, c2, bkgd): [0.075563, 0.064747, 1.0]
ElogPi_volunteer:  tensor([[[-1.38528, -1.38528, -1.38528, -1.38528],
         [-1.53874, -1.53874, -1.53874, -1.53874],
         [-1.53874, -1.53874, -1.53874, -1.53874]],
        [[-1.53874, -1.53874, -1.53874, -1.53874],
         [-1.38528, -1.38528, -1.38528, -1.38528],
         [-1.53874, -1.53874, -1.53874, -1.53874]],
        [[-1.53874, -1.53874, -1.53874, -1.53874],
         [-1.53874, -1.53874, -1.53874, -1.53874],
         [-1.38528, -1.38528, -1.38528, -1.38528]]], device='cuda:0', dtype=torch.float64)
base_lib:  tensor([2, 2, 2,  ..., 2, 2, 2])
<class 'torch.Tensor'>
<class 'torch.Tensor'>
torch.Size([3, 3, 4])
torch.Size([504000])
tensor([[-1.53874, -1.53874, -1.53874,  ..., -1.53874, -1.53874, -1.53874],
        [-1.53874, -1.53874, -1.53874,  ..., -1.53874, -1.53874, -1.53874],
        [-1.38528, -1.38528, -1.38528,  ..., -1.38528, -1.38528, -1.38528]], device='cuda:0', dtype=torch.float64)
ElogPi_volunteer:  tensor([[[-1.38528, -1.38528, -1.38528, -1.38528],
         [-1.53874, -1.53874, -1.53874, -1.53874],
         [-1.53874, -1.53874, -1.53874, -1.53874]],
        [[-1.53874, -1.53874, -1.53874, -1.53874],
         [-1.38528, -1.38528, -1.38528, -1.38528],
         [-1.53874, -1.53874, -1.53874, -1.53874]],
        [[-1.53874, -1.53874, -1.53874, -1.53874],
         [-1.53874, -1.53874, -1.53874, -1.53874],
         [-1.38528, -1.38528, -1.38528, -1.38528]]], device='cuda:0', dtype=torch.float64)
base_lib:  tensor([2, 2, 2,  ..., 2, 2, 2])
<class 'torch.Tensor'>
<class 'torch.Tensor'>
torch.Size([3, 3, 4])
torch.Size([504000])
tensor([[-1.53874, -1.53874, -1.53874,  ..., -1.53874, -1.53874, -1.53874],
        [-1.53874, -1.53874, -1.53874,  ..., -1.53874, -1.53874, -1.53874],
        [-1.38528, -1.38528, -1.38528,  ..., -1.38528, -1.38528, -1.38528]], device='cuda:0', dtype=torch.float64)
ElogPi_volunteer:  tensor([[[-1.38528, -1.38528, -1.38528, -1.38528],
         [-1.53874, -1.53874, -1.53874, -1.53874],
         [-1.53874, -1.53874, -1.53874, -1.53874]],
        [[-1.53874, -1.53874, -1.53874, -1.53874],
         [-1.38528, -1.38528, -1.38528, -1.38528],
         [-1.53874, -1.53874, -1.53874, -1.53874]],
        [[-1.53874, -1.53874, -1.53874, -1.53874],
         [-1.53874, -1.53874, -1.53874, -1.53874],
         [-1.38528, -1.38528, -1.38528, -1.38528]]], device='cuda:0', dtype=torch.float64)
base_lib:  tensor([2, 2, 2,  ..., 2, 2, 2])
<class 'torch.Tensor'>
<class 'torch.Tensor'>
torch.Size([3, 3, 4])
torch.Size([504000])
tensor([[-1.53874, -1.53874, -1.53874,  ..., -1.53874, -1.53874, -1.53874],
        [-1.53874, -1.53874, -1.53874,  ..., -1.53874, -1.53874, -1.53874],
        [-1.38528, -1.38528, -1.38528,  ..., -1.38528, -1.38528, -1.38528]], device='cuda:0', dtype=torch.float64)
ElogPi_volunteer:  tensor([[[-1.38528, -1.38528, -1.38528, -1.38528],
         [-1.53874, -1.53874, -1.53874, -1.53874],
         [-1.53874, -1.53874, -1.53874, -1.53874]],
        [[-1.53874, -1.53874, -1.53874, -1.53874],
         [-1.38528, -1.38528, -1.38528, -1.38528],
         [-1.53874, -1.53874, -1.53874, -1.53874]],
        [[-1.53874, -1.53874, -1.53874, -1.53874],
         [-1.53874, -1.53874, -1.53874, -1.53874],
         [-1.38528, -1.38528, -1.38528, -1.38528]]], device='cuda:0', dtype=torch.float64)
base_lib:  tensor([2, 2, 2,  ..., 2, 2, 2])
<class 'torch.Tensor'>
<class 'torch.Tensor'>
torch.Size([3, 3, 4])
torch.Size([504000])
tensor([[-1.53874, -1.53874, -1.53874,  ..., -1.53874, -1.53874, -1.53874],
        [-1.53874, -1.53874, -1.53874,  ..., -1.53874, -1.53874, -1.53874],

      0/79     7.44G         0   0.02265         0       222       640:   0%|          | 0/4 [00:02<?, ?it/s]
Minimum probs (c1, c2, bkgd): [1.5e-05, 1.1e-05, 0.841797]
Maximum probs (c1, c2, bkgd): [0.109224, 0.092917, 1.0]
ElogPi_volunteer:  tensor([[[-4.96621e+00, -4.97111e+00, -5.07819e+00, -4.84500e+00],
         [-6.38744e+00, -6.55175e+00, -6.81972e+00, -6.81163e+00],
         [-1.03554e-02, -1.00530e-02, -8.98188e-03, -1.06482e-02]],
        [[-5.28455e+00, -5.22973e+00, -5.36342e+00, -5.16589e+00],
         [-6.23197e+00, -6.39136e+00, -6.60129e+00, -6.61748e+00],
         [-8.79665e-03, -8.78432e-03, -7.77061e-03, -8.78412e-03]],
        [[-7.07175e+00, -6.95291e+00, -7.20530e+00, -6.89970e+00],
         [-8.63249e+00, -8.98590e+00, -1.02196e+01, -1.02192e+01],
         [-1.02948e-03, -1.08359e-03, -7.81375e-04, -1.04708e-03]]], device='cuda:0', dtype=torch.float64)
base_lib:  tensor([2, 2, 2,  ..., 2, 2, 2])
<class 'torch.Tensor'>
<class 'torch.Tensor'>
torch.Size([3, 3, 4])
torch.Size([504000])
tensor([[-0.01036, -0.01036, -0.01036,  ..., -0.01036, -0.01036, -0.01036],
        [-0.00880, -0.00880, -0.00880,  ..., -0.00880, -0.00880, -0.00880],
        [-0.00103, -0.00103, -0.00103,  ..., -0.00103, -0.00103, -0.00103]], device='cuda:0', dtype=torch.float64)
ElogPi_volunteer:  tensor([[[-4.96621e+00, -4.97111e+00, -5.07819e+00, -4.84500e+00],
         [-6.38744e+00, -6.55175e+00, -6.81972e+00, -6.81163e+00],
         [-1.03554e-02, -1.00530e-02, -8.98188e-03, -1.06482e-02]],
        [[-5.28455e+00, -5.22973e+00, -5.36342e+00, -5.16589e+00],
         [-6.23197e+00, -6.39136e+00, -6.60129e+00, -6.61748e+00],
         [-8.79665e-03, -8.78432e-03, -7.77061e-03, -8.78412e-03]],
        [[-7.07175e+00, -6.95291e+00, -7.20530e+00, -6.89970e+00],
         [-8.63249e+00, -8.98590e+00, -1.02196e+01, -1.02192e+01],
         [-1.02948e-03, -1.08359e-03, -7.81375e-04, -1.04708e-03]]], device='cuda:0', dtype=torch.float64)
base_lib:  tensor([2, 2, 2,  ..., 2, 2, 2])
<class 'torch.Tensor'>
<class 'torch.Tensor'>
torch.Size([3, 3, 4])
torch.Size([504000])
tensor([[-0.01005, -0.01005, -0.01005,  ..., -0.01005, -0.01005, -0.01005],
        [-0.00878, -0.00878, -0.00878,  ..., -0.00878, -0.00878, -0.00878],
        [-0.00108, -0.00108, -0.00108,  ..., -0.00108, -0.00108, -0.00108]], device='cuda:0', dtype=torch.float64)
ElogPi_volunteer:  tensor([[[-4.96621e+00, -4.97111e+00, -5.07819e+00, -4.84500e+00],
         [-6.38744e+00, -6.55175e+00, -6.81972e+00, -6.81163e+00],
         [-1.03554e-02, -1.00530e-02, -8.98188e-03, -1.06482e-02]],
        [[-5.28455e+00, -5.22973e+00, -5.36342e+00, -5.16589e+00],
         [-6.23197e+00, -6.39136e+00, -6.60129e+00, -6.61748e+00],
         [-8.79665e-03, -8.78432e-03, -7.77061e-03, -8.78412e-03]],
        [[-7.07175e+00, -6.95291e+00, -7.20530e+00, -6.89970e+00],
         [-8.63249e+00, -8.98590e+00, -1.02196e+01, -1.02192e+01],
         [-1.02948e-03, -1.08359e-03, -7.81375e-04, -1.04708e-03]]], device='cuda:0', dtype=torch.float64)
base_lib:  tensor([2, 2, 2,  ..., 2, 2, 2])
<class 'torch.Tensor'>
<class 'torch.Tensor'>
torch.Size([3, 3, 4])
torch.Size([504000])
tensor([[-0.00898, -0.00898, -0.00898,  ..., -0.00898, -0.00898, -0.00898],
        [-0.00777, -0.00777, -0.00777,  ..., -0.00777, -0.00777, -0.00777],
        [-0.00078, -0.00078, -0.00078,  ..., -0.00078, -0.00078, -0.00078]], device='cuda:0', dtype=torch.float64)
ElogPi_volunteer:  tensor([[[-4.96621e+00, -4.97111e+00, -5.07819e+00, -4.84500e+00],
         [-6.38744e+00, -6.55175e+00, -6.81972e+00, -6.81163e+00],
         [-1.03554e-02, -1.00530e-02, -8.98188e-03, -1.06482e-02]],
        [[-5.28455e+00, -5.22973e+00, -5.36342e+00, -5.16589e+00],
         [-6.23197e+00, -6.39136e+00, -6.60129e+00, -6.61748e+00],
         [-8.79665e-03, -8.78432e-03, -7.77061e-03, -8.78412e-03]],
        [[-7.07175e+00, -6.95291e+00, -7.20530e+00, -6.89970e+00],
         [-8.63249e+00, -8.98590e+00, -1.02196e+01, -1.02192e+01],
         [-1.02948e-03, -1.08359e-03, -7.81375e-04, -1.04708e-03]]], device='cuda:0', dtype=torch.float64)
base_lib:  tensor([2, 2, 2,  ..., 2, 2, 2])
<class 'torch.Tensor'>
<class 'torch.Tensor'>
torch.Size([3, 3, 4])
torch.Size([504000])
tensor([[-0.01065, -0.01065, -0.01065,  ..., -0.01065, -0.01065, -0.01065],
        [-0.00878, -0.00878, -0.00878,  ..., -0.00878, -0.00878, -0.00878],
        [-0.00105, -0.00105, -0.00105,  ..., -0.00105, -0.00105, -0.00105]], device='cuda:0', dtype=torch.float64)
Minimum probs (c1, c2, bkgd): [1.2e-05, 5e-06, 0.867188]
Maximum probs (c1, c2, bkgd): [0.106174, 0.060043, 1.0]
ElogPi_volunteer:  tensor([[[-2.01466e+00, -2.05394e+00, -2.13806e+00, -1.86537e+00],
         [-4.66455e+00, -6.04086e+00, -5.23149e+00, -4.98025e+00],
         [-1.55053e-01, -1.40918e-01, -1.32466e-01, -1.77395e-01]],
        [[-2.69570e+00, -2.63329e+00, -2.83072e+00, -2.51829e+00],
         [-4.64994e+00, -5.25985e+00, -4.53009e+00, -4.35438e+00],
         [-8.12340e-02, -8.12097e-02, -7.33407e-02, -9.91732e-02]],
        [[-7.29406e+00, -6.58404e+00, -7.29367e+00, -6.91124e+00],
         [-8.30096e+00, -1.06880e+01, -1.07131e+01, -9.89841e+00],
         [-9.30263e-04, -1.40804e-03, -7.04311e-04, -1.04932e-03]]], device='cuda:0', dtype=torch.float64)
base_lib:  tensor([2, 2, 2,  ..., 2, 2, 2])
<class 'torch.Tensor'>
<class 'torch.Tensor'>
torch.Size([3, 3, 4])
torch.Size([504000])
tensor([[-0.15505, -0.15505, -0.15505,  ..., -0.15505, -0.15505, -0.15505],
        [-0.08123, -0.08123, -0.08123,  ..., -0.08123, -0.08123, -0.08123],
        [-0.00093, -0.00093, -0.00093,  ..., -0.00093, -0.00093, -0.00093]], device='cuda:0', dtype=torch.float64)
ElogPi_volunteer:  tensor([[[-2.01466e+00, -2.05394e+00, -2.13806e+00, -1.86537e+00],
         [-4.66455e+00, -6.04086e+00, -5.23149e+00, -4.98025e+00],
         [-1.55053e-01, -1.40918e-01, -1.32466e-01, -1.77395e-01]],
        [[-2.69570e+00, -2.63329e+00, -2.83072e+00, -2.51829e+00],
         [-4.64994e+00, -5.25985e+00, -4.53009e+00, -4.35438e+00],
         [-8.12340e-02, -8.12097e-02, -7.33407e-02, -9.91732e-02]],
        [[-7.29406e+00, -6.58404e+00, -7.29367e+00, -6.91124e+00],
         [-8.30096e+00, -1.06880e+01, -1.07131e+01, -9.89841e+00],
         [-9.30263e-04, -1.40804e-03, -7.04311e-04, -1.04932e-03]]], device='cuda:0', dtype=torch.float64)
base_lib:  tensor([2, 2, 2,  ..., 2, 2, 2])
<class 'torch.Tensor'>
<class 'torch.Tensor'>
torch.Size([3, 3, 4])
torch.Size([504000])
tensor([[-0.14092, -0.14092, -0.14092,  ..., -0.14092, -0.14092, -0.14092],
        [-0.08121, -0.08121, -0.08121,  ..., -0.08121, -0.08121, -0.08121],
        [-0.00141, -0.00141, -0.00141,  ..., -0.00141, -0.00141, -0.00141]], device='cuda:0', dtype=torch.float64)
ElogPi_volunteer:  tensor([[[-2.01466e+00, -2.05394e+00, -2.13806e+00, -1.86537e+00],
         [-4.66455e+00, -6.04086e+00, -5.23149e+00, -4.98025e+00],
         [-1.55053e-01, -1.40918e-01, -1.32466e-01, -1.77395e-01]],
        [[-2.69570e+00, -2.63329e+00, -2.83072e+00, -2.51829e+00],
         [-4.64994e+00, -5.25985e+00, -4.53009e+00, -4.35438e+00],
         [-8.12340e-02, -8.12097e-02, -7.33407e-02, -9.91732e-02]],
        [[-7.29406e+00, -6.58404e+00, -7.29367e+00, -6.91124e+00],
         [-8.30096e+00, -1.06880e+01, -1.07131e+01, -9.89841e+00],
         [-9.30263e-04, -1.40804e-03, -7.04311e-04, -1.04932e-03]]], device='cuda:0', dtype=torch.float64)
base_lib:  tensor([2, 2, 2,  ..., 2, 2, 2])
<class 'torch.Tensor'>
<class 'torch.Tensor'>
torch.Size([3, 3, 4])
torch.Size([504000])
tensor([[-0.13247, -0.13247, -0.13247,  ..., -0.13247, -0.13247, -0.13247],
        [-0.07334, -0.07334, -0.07334,  ..., -0.07334, -0.07334, -0.07334],
        [-0.00070, -0.00070, -0.00070,  ..., -0.00070, -0.00070, -0.00070]], device='cuda:0', dtype=torch.float64)
ElogPi_volunteer:  tensor([[[-2.01466e+00, -2.05394e+00, -2.13806e+00, -1.86537e+00],
         [-4.66455e+00, -6.04086e+00, -5.23149e+00, -4.98025e+00],
         [-1.55053e-01, -1.40918e-01, -1.32466e-01, -1.77395e-01]],
        [[-2.69570e+00, -2.63329e+00, -2.83072e+00, -2.51829e+00],
         [-4.64994e+00, -5.25985e+00, -4.53009e+00, -4.35438e+00],
         [-8.12340e-02, -8.12097e-02, -7.33407e-02, -9.91732e-02]],
        [[-7.29406e+00, -6.58404e+00, -7.29367e+00, -6.91124e+00],
         [-8.30096e+00, -1.06880e+01, -1.07131e+01, -9.89841e+00],
         [-9.30263e-04, -1.40804e-03, -7.04311e-04, -1.04932e-03]]], device='cuda:0', dtype=torch.float64)
base_lib:  tensor([2, 2, 2,  ..., 2, 2, 2])
<class 'torch.Tensor'>
<class 'torch.Tensor'>
torch.Size([3, 3, 4])
torch.Size([504000])
tensor([[-0.17739, -0.17739, -0.17739,  ..., -0.17739, -0.17739, -0.17739],
        [-0.09917, -0.09917, -0.09917,  ..., -0.09917, -0.09917, -0.09917],
        [-0.00105, -0.00105, -0.00105,  ..., -0.00105, -0.00105, -0.00105]], device='cuda:0', dtype=torch.float64)
Minimum probs (c1, c2, bkgd): [2.1e-05, 1.7e-05, 0.851074]
Maximum probs (c1, c2, bkgd): [0.061908, 0.102134, 1.0]
ElogPi_volunteer:  tensor([[[-1.49617e+00, -1.46900e+00, -1.54340e+00, -1.39116e+00],
         [-4.02996e+00, -5.30822e+00, -4.83756e+00, -4.14160e+00],
         [-2.77974e-01, -2.69218e-01, -2.51669e-01, -3.08710e-01]],
        [[-2.70686e+00, -2.10118e+00, -2.78353e+00, -2.46225e+00],
         [-3.48031e+00, -4.64796e+00, -3.75100e+00, -3.09930e+00],
         [-1.03802e-01, -1.42650e-01, -9.03249e-02, -1.40846e-01]],
        [[-8.34926e+00, -6.77651e+00, -8.53508e+00, -7.97096e+00],
         [-8.55006e+00, -1.14828e+01, -9.91770e+00, -9.05494e+00],
         [-4.32188e-04, -1.15319e-03, -2.47768e-04, -4.64256e-04]]], device='cuda:0', dtype=torch.float64)
base_lib:  tensor([2, 2, 2,  ..., 2, 2, 2])
<class 'torch.Tensor'>
<class 'torch.Tensor'>
torch.Size([3, 3, 4])
torch.Size([252000])
tensor([[-0.27797, -0.27797, -0.27797,  ..., -0.27797, -0.27797, -0.27797],
        [-0.10380, -0.10380, -0.10380,  ..., -0.10380, -0.10380, -0.10380],
        [-0.00043, -0.00043, -0.00043,  ..., -0.00043, -0.00043, -0.00043]], device='cuda:0', dtype=torch.float64)
ElogPi_volunteer:  tensor([[[-1.49617e+00, -1.46900e+00, -1.54340e+00, -1.39116e+00],
         [-4.02996e+00, -5.30822e+00, -4.83756e+00, -4.14160e+00],
         [-2.77974e-01, -2.69218e-01, -2.51669e-01, -3.08710e-01]],
        [[-2.70686e+00, -2.10118e+00, -2.78353e+00, -2.46225e+00],
         [-3.48031e+00, -4.64796e+00, -3.75100e+00, -3.09930e+00],
         [-1.03802e-01, -1.42650e-01, -9.03249e-02, -1.40846e-01]],
        [[-8.34926e+00, -6.77651e+00, -8.53508e+00, -7.97096e+00],
         [-8.55006e+00, -1.14828e+01, -9.91770e+00, -9.05494e+00],
         [-4.32188e-04, -1.15319e-03, -2.47768e-04, -4.64256e-04]]], device='cuda:0', dtype=torch.float64)
base_lib:  tensor([2, 2, 2,  ..., 2, 2, 2])
<class 'torch.Tensor'>
<class 'torch.Tensor'>
torch.Size([3, 3, 4])
torch.Size([252000])
tensor([[-0.26922, -0.26922, -0.26922,  ..., -0.26922, -0.26922, -0.26922],
        [-0.14265, -0.14265, -0.14265,  ..., -0.14265, -0.14265, -0.14265],
        [-0.00115, -0.00115, -0.00115,  ..., -0.00115, -0.00115, -0.00115]], device='cuda:0', dtype=torch.float64)
ElogPi_volunteer:  tensor([[[-1.49617e+00, -1.46900e+00, -1.54340e+00, -1.39116e+00],
         [-4.02996e+00, -5.30822e+00, -4.83756e+00, -4.14160e+00],
         [-2.77974e-01, -2.69218e-01, -2.51669e-01, -3.08710e-01]],
        [[-2.70686e+00, -2.10118e+00, -2.78353e+00, -2.46225e+00],
         [-3.48031e+00, -4.64796e+00, -3.75100e+00, -3.09930e+00],
         [-1.03802e-01, -1.42650e-01, -9.03249e-02, -1.40846e-01]],
        [[-8.34926e+00, -6.77651e+00, -8.53508e+00, -7.97096e+00],
         [-8.55006e+00, -1.14828e+01, -9.91770e+00, -9.05494e+00],
         [-4.32188e-04, -1.15319e-03, -2.47768e-04, -4.64256e-04]]], device='cuda:0', dtype=torch.float64)
base_lib:  tensor([2, 2, 2,  ..., 2, 2, 2])
<class 'torch.Tensor'>
<class 'torch.Tensor'>
torch.Size([3, 3, 4])
torch.Size([252000])
tensor([[-2.51669e-01, -2.51669e-01, -2.51669e-01,  ..., -2.51669e-01, -2.51669e-01, -2.51669e-01],
        [-9.03249e-02, -9.03249e-02, -9.03249e-02,  ..., -9.03249e-02, -9.03249e-02, -9.03249e-02],
        [-2.47768e-04, -2.47768e-04, -2.47768e-04,  ..., -2.47768e-04, -2.47768e-04, -2.47768e-04]], device='cuda:0', dtype=torch.float64)
ElogPi_volunteer:  tensor([[[-1.49617e+00, -1.46900e+00, -1.54340e+00, -1.39116e+00],
         [-4.02996e+00, -5.30822e+00, -4.83756e+00, -4.14160e+00],
         [-2.77974e-01, -2.69218e-01, -2.51669e-01, -3.08710e-01]],
        [[-2.70686e+00, -2.10118e+00, -2.78353e+00, -2.46225e+00],
         [-3.48031e+00, -4.64796e+00, -3.75100e+00, -3.09930e+00],
         [-1.03802e-01, -1.42650e-01, -9.03249e-02, -1.40846e-01]],
        [[-8.34926e+00, -6.77651e+00, -8.53508e+00, -7.97096e+00],
         [-8.55006e+00, -1.14828e+01, -9.91770e+00, -9.05494e+00],
         [-4.32188e-04, -1.15319e-03, -2.47768e-04, -4.64256e-04]]], device='cuda:0', dtype=torch.float64)
base_lib:  tensor([2, 2, 2,  ..., 2, 2, 2])
<class 'torch.Tensor'>
<class 'torch.Tensor'>
torch.Size([3, 3, 4])
torch.Size([252000])
tensor([[-0.30871, -0.30871, -0.30871,  ..., -0.30871, -0.30871, -0.30871],
        [-0.14085, -0.14085, -0.14085,  ..., -0.14085, -0.14085, -0.14085],

      0/79       14G   0.08138   0.04381   0.01811       289       640:  75%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–Œ  | 3/4 [00:05<00:01,  1.42s/it]
      0/79       14G   0.09173   0.04894   0.02044       114       640: 100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 4/4 [00:05<00:00,  1.46s/it]
               Class     Images     Labels          P          R     mAP@.5 mAP@.5:.95: 100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 2/2 [00:01<00:00,  1.08it/s]
                 all         70        961    0.00292     0.0163    0.00135   0.000268
               Class     Images     Labels          P          R     mAP@.5 mAP@.5:.95: 100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 4/4 [00:01<00:00,  2.54it/s]
     Epoch   gpu_mem       box       obj       cls    labels  img_size
YOLO+BCC
  0%|          | 0/4 [00:00<?, ?it/s]
Minimum probs (c1, c2, bkgd): [6e-06, 9e-06, 0.911621]
Maximum probs (c1, c2, bkgd): [0.060569, 0.057642, 1.0]
ElogPi_volunteer:  tensor([[[-1.27362e+00, -1.42512e+00, -1.09160e+00, -1.29185e+00],
         [-4.26533e+00, -5.54857e+00, -4.37143e+00, -4.49844e+00],
         [-3.51335e-01, -2.83314e-01, -4.31860e-01, -3.40060e-01]],
        [[-3.30463e+00, -2.15941e+00, -2.90210e+00, -2.99835e+00],
         [-2.80214e+00, -3.96042e+00, -2.44935e+00, -2.59165e+00],
         [-1.04954e-01, -1.46976e-01, -1.54903e-01, -1.35830e-01]],
        [[-9.00092e+00, -7.27274e+00, -8.85990e+00, -8.84423e+00],
         [-9.30690e+00, -1.29427e+01, -9.95017e+00, -9.56016e+00],
         [-2.18084e-04, -7.00595e-04, -1.93671e-04, -2.18685e-04]]], device='cuda:0', dtype=torch.float64)
base_lib:  tensor([2, 2, 2,  ..., 2, 2, 2])
<class 'torch.Tensor'>
<class 'torch.Tensor'>
torch.Size([3, 3, 4])
torch.Size([504000])
tensor([[-3.51335e-01, -3.51335e-01, -3.51335e-01,  ..., -3.51335e-01, -3.51335e-01, -3.51335e-01],
        [-1.04954e-01, -1.04954e-01, -1.04954e-01,  ..., -1.04954e-01, -1.04954e-01, -1.04954e-01],
        [-2.18084e-04, -2.18084e-04, -2.18084e-04,  ..., -2.18084e-04, -2.18084e-04, -2.18084e-04]], device='cuda:0', dtype=torch.float64)
ElogPi_volunteer:  tensor([[[-1.27362e+00, -1.42512e+00, -1.09160e+00, -1.29185e+00],
         [-4.26533e+00, -5.54857e+00, -4.37143e+00, -4.49844e+00],
         [-3.51335e-01, -2.83314e-01, -4.31860e-01, -3.40060e-01]],
        [[-3.30463e+00, -2.15941e+00, -2.90210e+00, -2.99835e+00],
         [-2.80214e+00, -3.96042e+00, -2.44935e+00, -2.59165e+00],
         [-1.04954e-01, -1.46976e-01, -1.54903e-01, -1.35830e-01]],
        [[-9.00092e+00, -7.27274e+00, -8.85990e+00, -8.84423e+00],
         [-9.30690e+00, -1.29427e+01, -9.95017e+00, -9.56016e+00],
         [-2.18084e-04, -7.00595e-04, -1.93671e-04, -2.18685e-04]]], device='cuda:0', dtype=torch.float64)
base_lib:  tensor([2, 2, 2,  ..., 2, 2, 2])
<class 'torch.Tensor'>
<class 'torch.Tensor'>
torch.Size([3, 3, 4])
torch.Size([504000])
tensor([[-0.28331, -0.28331, -0.28331,  ..., -0.28331, -0.28331, -0.28331],
        [-0.14698, -0.14698, -0.14698,  ..., -0.14698, -0.14698, -0.14698],
        [-0.00070, -0.00070, -0.00070,  ..., -0.00070, -0.00070, -0.00070]], device='cuda:0', dtype=torch.float64)
ElogPi_volunteer:  tensor([[[-1.27362e+00, -1.42512e+00, -1.09160e+00, -1.29185e+00],
         [-4.26533e+00, -5.54857e+00, -4.37143e+00, -4.49844e+00],
         [-3.51335e-01, -2.83314e-01, -4.31860e-01, -3.40060e-01]],
        [[-3.30463e+00, -2.15941e+00, -2.90210e+00, -2.99835e+00],
         [-2.80214e+00, -3.96042e+00, -2.44935e+00, -2.59165e+00],
         [-1.04954e-01, -1.46976e-01, -1.54903e-01, -1.35830e-01]],
        [[-9.00092e+00, -7.27274e+00, -8.85990e+00, -8.84423e+00],
         [-9.30690e+00, -1.29427e+01, -9.95017e+00, -9.56016e+00],
         [-2.18084e-04, -7.00595e-04, -1.93671e-04, -2.18685e-04]]], device='cuda:0', dtype=torch.float64)
base_lib:  tensor([2, 2, 2,  ..., 2, 2, 2])
<class 'torch.Tensor'>
<class 'torch.Tensor'>
torch.Size([3, 3, 4])
torch.Size([504000])
tensor([[-4.31860e-01, -4.31860e-01, -4.31860e-01,  ..., -4.31860e-01, -4.31860e-01, -4.31860e-01],
        [-1.54903e-01, -1.54903e-01, -1.54903e-01,  ..., -1.54903e-01, -1.54903e-01, -1.54903e-01],
        [-1.93671e-04, -1.93671e-04, -1.93671e-04,  ..., -1.93671e-04, -1.93671e-04, -1.93671e-04]], device='cuda:0', dtype=torch.float64)
ElogPi_volunteer:  tensor([[[-1.27362e+00, -1.42512e+00, -1.09160e+00, -1.29185e+00],
         [-4.26533e+00, -5.54857e+00, -4.37143e+00, -4.49844e+00],
         [-3.51335e-01, -2.83314e-01, -4.31860e-01, -3.40060e-01]],
        [[-3.30463e+00, -2.15941e+00, -2.90210e+00, -2.99835e+00],
         [-2.80214e+00, -3.96042e+00, -2.44935e+00, -2.59165e+00],
         [-1.04954e-01, -1.46976e-01, -1.54903e-01, -1.35830e-01]],
        [[-9.00092e+00, -7.27274e+00, -8.85990e+00, -8.84423e+00],
         [-9.30690e+00, -1.29427e+01, -9.95017e+00, -9.56016e+00],
         [-2.18084e-04, -7.00595e-04, -1.93671e-04, -2.18685e-04]]], device='cuda:0', dtype=torch.float64)
base_lib:  tensor([2, 2, 2,  ..., 2, 2, 2])
<class 'torch.Tensor'>
<class 'torch.Tensor'>
torch.Size([3, 3, 4])
torch.Size([504000])
tensor([[-3.40060e-01, -3.40060e-01, -3.40060e-01,  ..., -3.40060e-01, -3.40060e-01, -3.40060e-01],
        [-1.35830e-01, -1.35830e-01, -1.35830e-01,  ..., -1.35830e-01, -1.35830e-01, -1.35830e-01],
        [-2.18685e-04, -2.18685e-04, -2.18685e-04,  ..., -2.18685e-04, -2.18685e-04, -2.18685e-04]], device='cuda:0', dtype=torch.float64)
Minimum probs (c1, c2, bkgd): [8e-06, 9e-06, 0.84375]
Maximum probs (c1, c2, bkgd): [0.107374, 0.093944, 1.0]
ElogPi_volunteer:  tensor([[[-1.04468e+00, -1.47877e+00, -1.15322e+00, -9.10557e-01],
         [-4.45731e+00, -4.55071e+00, -6.37271e+00, -6.57328e+00],
         [-4.53297e-01, -2.73847e-01, -3.83277e-01, -5.18761e-01]],
        [[-3.25992e+00, -2.43533e+00, -3.32077e+00, -2.88070e+00],
         [-2.94136e+00, -2.82189e+00, -4.20149e+00, -4.28313e+00],
         [-9.69959e-02, -1.60542e-01, -5.37702e-02, -7.38049e-02]],
        [[-8.78567e+00, -7.79610e+00, -9.06363e+00, -8.55328e+00],
         [-9.46625e+00, -1.11086e+01, -1.13105e+01, -1.11289e+01],
         [-2.32344e-04, -4.28391e-04, -1.30030e-04, -2.09595e-04]]], device='cuda:0', dtype=torch.float64)
base_lib:  tensor([2, 2, 2,  ..., 2, 2, 2])
<class 'torch.Tensor'>
<class 'torch.Tensor'>
torch.Size([3, 3, 4])
torch.Size([504000])
tensor([[-4.53297e-01, -4.53297e-01, -4.53297e-01,  ..., -4.53297e-01, -4.53297e-01, -4.53297e-01],
        [-9.69959e-02, -9.69959e-02, -9.69959e-02,  ..., -9.69959e-02, -9.69959e-02, -9.69959e-02],
        [-2.32344e-04, -2.32344e-04, -2.32344e-04,  ..., -2.32344e-04, -2.32344e-04, -2.32344e-04]], device='cuda:0', dtype=torch.float64)
ElogPi_volunteer:  tensor([[[-1.04468e+00, -1.47877e+00, -1.15322e+00, -9.10557e-01],
         [-4.45731e+00, -4.55071e+00, -6.37271e+00, -6.57328e+00],
         [-4.53297e-01, -2.73847e-01, -3.83277e-01, -5.18761e-01]],
        [[-3.25992e+00, -2.43533e+00, -3.32077e+00, -2.88070e+00],
         [-2.94136e+00, -2.82189e+00, -4.20149e+00, -4.28313e+00],
         [-9.69959e-02, -1.60542e-01, -5.37702e-02, -7.38049e-02]],
        [[-8.78567e+00, -7.79610e+00, -9.06363e+00, -8.55328e+00],
         [-9.46625e+00, -1.11086e+01, -1.13105e+01, -1.11289e+01],
         [-2.32344e-04, -4.28391e-04, -1.30030e-04, -2.09595e-04]]], device='cuda:0', dtype=torch.float64)
base_lib:  tensor([2, 2, 2,  ..., 2, 2, 2])
<class 'torch.Tensor'>
<class 'torch.Tensor'>
torch.Size([3, 3, 4])
torch.Size([504000])
tensor([[-0.27385, -0.27385, -0.27385,  ..., -0.27385, -0.27385, -0.27385],
        [-0.16054, -0.16054, -0.16054,  ..., -0.16054, -0.16054, -0.16054],
        [-0.00043, -0.00043, -0.00043,  ..., -0.00043, -0.00043, -0.00043]], device='cuda:0', dtype=torch.float64)
ElogPi_volunteer:  tensor([[[-1.04468e+00, -1.47877e+00, -1.15322e+00, -9.10557e-01],
         [-4.45731e+00, -4.55071e+00, -6.37271e+00, -6.57328e+00],
         [-4.53297e-01, -2.73847e-01, -3.83277e-01, -5.18761e-01]],
        [[-3.25992e+00, -2.43533e+00, -3.32077e+00, -2.88070e+00],
         [-2.94136e+00, -2.82189e+00, -4.20149e+00, -4.28313e+00],
         [-9.69959e-02, -1.60542e-01, -5.37702e-02, -7.38049e-02]],
        [[-8.78567e+00, -7.79610e+00, -9.06363e+00, -8.55328e+00],
         [-9.46625e+00, -1.11086e+01, -1.13105e+01, -1.11289e+01],
         [-2.32344e-04, -4.28391e-04, -1.30030e-04, -2.09595e-04]]], device='cuda:0', dtype=torch.float64)
base_lib:  tensor([2, 2, 2,  ..., 2, 2, 2])
<class 'torch.Tensor'>
<class 'torch.Tensor'>
torch.Size([3, 3, 4])
torch.Size([504000])
tensor([[-3.83277e-01, -3.83277e-01, -3.83277e-01,  ..., -3.83277e-01, -3.83277e-01, -3.83277e-01],
        [-5.37702e-02, -5.37702e-02, -5.37702e-02,  ..., -5.37702e-02, -5.37702e-02, -5.37702e-02],
        [-1.30030e-04, -1.30030e-04, -1.30030e-04,  ..., -1.30030e-04, -1.30030e-04, -1.30030e-04]], device='cuda:0', dtype=torch.float64)
ElogPi_volunteer:  tensor([[[-1.04468e+00, -1.47877e+00, -1.15322e+00, -9.10557e-01],
         [-4.45731e+00, -4.55071e+00, -6.37271e+00, -6.57328e+00],
         [-4.53297e-01, -2.73847e-01, -3.83277e-01, -5.18761e-01]],
        [[-3.25992e+00, -2.43533e+00, -3.32077e+00, -2.88070e+00],
         [-2.94136e+00, -2.82189e+00, -4.20149e+00, -4.28313e+00],
         [-9.69959e-02, -1.60542e-01, -5.37702e-02, -7.38049e-02]],
        [[-8.78567e+00, -7.79610e+00, -9.06363e+00, -8.55328e+00],
         [-9.46625e+00, -1.11086e+01, -1.13105e+01, -1.11289e+01],
         [-2.32344e-04, -4.28391e-04, -1.30030e-04, -2.09595e-04]]], device='cuda:0', dtype=torch.float64)
base_lib:  tensor([2, 2, 2,  ..., 2, 2, 2])
<class 'torch.Tensor'>
<class 'torch.Tensor'>
torch.Size([3, 3, 4])
torch.Size([504000])
tensor([[-5.18761e-01, -5.18761e-01, -5.18761e-01,  ..., -5.18761e-01, -5.18761e-01, -5.18761e-01],
        [-7.38049e-02, -7.38049e-02, -7.38049e-02,  ..., -7.38049e-02, -7.38049e-02, -7.38049e-02],
        [-2.09595e-04, -2.09595e-04, -2.09595e-04,  ..., -2.09595e-04, -2.09595e-04, -2.09595e-04]], device='cuda:0', dtype=torch.float64)
Minimum probs (c1, c2, bkgd): [1.1e-05, 4e-06, 0.835938]
Maximum probs (c1, c2, bkgd): [0.131084, 0.065556, 1.0]
ElogPi_volunteer:  tensor([[[-9.00029e-01, -1.06915e+00, -9.96740e-01, -6.84427e-01],
         [-4.36853e+00, -6.75423e+00, -7.23674e+00, -6.80828e+00],
         [-5.44881e-01, -4.23586e-01, -4.63028e-01, -7.05869e-01]],
        [[-3.67791e+00, -1.84361e+00, -3.37028e+00, -2.92028e+00],
         [-2.65344e+00, -4.14771e+00, -3.75076e+00, -3.39405e+00],
         [-1.01750e-01, -1.92500e-01, -6.07483e-02, -9.27207e-02]],
        [[-8.82042e+00, -7.20373e+00, -8.72001e+00, -8.24388e+00],
         [-8.95602e+00, -1.18918e+01, -1.13818e+01, -1.05025e+01],
         [-2.78674e-04, -7.52902e-04, -1.76679e-04, -2.92358e-04]]], device='cuda:0', dtype=torch.float64)
base_lib:  tensor([2, 2, 2,  ..., 2, 2, 2])
<class 'torch.Tensor'>
<class 'torch.Tensor'>
torch.Size([3, 3, 4])
torch.Size([504000])
tensor([[-5.44881e-01, -5.44881e-01, -5.44881e-01,  ..., -5.44881e-01, -5.44881e-01, -5.44881e-01],
        [-1.01750e-01, -1.01750e-01, -1.01750e-01,  ..., -1.01750e-01, -1.01750e-01, -1.01750e-01],
        [-2.78674e-04, -2.78674e-04, -2.78674e-04,  ..., -2.78674e-04, -2.78674e-04, -2.78674e-04]], device='cuda:0', dtype=torch.float64)
ElogPi_volunteer:  tensor([[[-9.00029e-01, -1.06915e+00, -9.96740e-01, -6.84427e-01],
         [-4.36853e+00, -6.75423e+00, -7.23674e+00, -6.80828e+00],
         [-5.44881e-01, -4.23586e-01, -4.63028e-01, -7.05869e-01]],
        [[-3.67791e+00, -1.84361e+00, -3.37028e+00, -2.92028e+00],
         [-2.65344e+00, -4.14771e+00, -3.75076e+00, -3.39405e+00],
         [-1.01750e-01, -1.92500e-01, -6.07483e-02, -9.27207e-02]],
        [[-8.82042e+00, -7.20373e+00, -8.72001e+00, -8.24388e+00],
         [-8.95602e+00, -1.18918e+01, -1.13818e+01, -1.05025e+01],
         [-2.78674e-04, -7.52902e-04, -1.76679e-04, -2.92358e-04]]], device='cuda:0', dtype=torch.float64)
base_lib:  tensor([2, 2, 2,  ..., 2, 2, 2])
<class 'torch.Tensor'>
<class 'torch.Tensor'>
torch.Size([3, 3, 4])
torch.Size([504000])
tensor([[-0.42359, -0.42359, -0.42359,  ..., -0.42359, -0.42359, -0.42359],
        [-0.19250, -0.19250, -0.19250,  ..., -0.19250, -0.19250, -0.19250],
        [-0.00075, -0.00075, -0.00075,  ..., -0.00075, -0.00075, -0.00075]], device='cuda:0', dtype=torch.float64)
ElogPi_volunteer:  tensor([[[-9.00029e-01, -1.06915e+00, -9.96740e-01, -6.84427e-01],
         [-4.36853e+00, -6.75423e+00, -7.23674e+00, -6.80828e+00],
         [-5.44881e-01, -4.23586e-01, -4.63028e-01, -7.05869e-01]],
        [[-3.67791e+00, -1.84361e+00, -3.37028e+00, -2.92028e+00],
         [-2.65344e+00, -4.14771e+00, -3.75076e+00, -3.39405e+00],
         [-1.01750e-01, -1.92500e-01, -6.07483e-02, -9.27207e-02]],
        [[-8.82042e+00, -7.20373e+00, -8.72001e+00, -8.24388e+00],
         [-8.95602e+00, -1.18918e+01, -1.13818e+01, -1.05025e+01],
         [-2.78674e-04, -7.52902e-04, -1.76679e-04, -2.92358e-04]]], device='cuda:0', dtype=torch.float64)
base_lib:  tensor([2, 2, 2,  ..., 2, 2, 2])
<class 'torch.Tensor'>
<class 'torch.Tensor'>
torch.Size([3, 3, 4])
torch.Size([504000])
tensor([[-4.63028e-01, -4.63028e-01, -4.63028e-01,  ..., -4.63028e-01, -4.63028e-01, -4.63028e-01],
        [-6.07483e-02, -6.07483e-02, -6.07483e-02,  ..., -6.07483e-02, -6.07483e-02, -6.07483e-02],
        [-1.76679e-04, -1.76679e-04, -1.76679e-04,  ..., -1.76679e-04, -1.76679e-04, -1.76679e-04]], device='cuda:0', dtype=torch.float64)
ElogPi_volunteer:  tensor([[[-9.00029e-01, -1.06915e+00, -9.96740e-01, -6.84427e-01],
         [-4.36853e+00, -6.75423e+00, -7.23674e+00, -6.80828e+00],
         [-5.44881e-01, -4.23586e-01, -4.63028e-01, -7.05869e-01]],
        [[-3.67791e+00, -1.84361e+00, -3.37028e+00, -2.92028e+00],
         [-2.65344e+00, -4.14771e+00, -3.75076e+00, -3.39405e+00],
         [-1.01750e-01, -1.92500e-01, -6.07483e-02, -9.27207e-02]],
        [[-8.82042e+00, -7.20373e+00, -8.72001e+00, -8.24388e+00],
         [-8.95602e+00, -1.18918e+01, -1.13818e+01, -1.05025e+01],
         [-2.78674e-04, -7.52902e-04, -1.76679e-04, -2.92358e-04]]], device='cuda:0', dtype=torch.float64)
base_lib:  tensor([2, 2, 2,  ..., 2, 2, 2])
<class 'torch.Tensor'>
<class 'torch.Tensor'>
torch.Size([3, 3, 4])
torch.Size([504000])
tensor([[-7.05869e-01, -7.05869e-01, -7.05869e-01,  ..., -7.05869e-01, -7.05869e-01, -7.05869e-01],
        [-9.27207e-02, -9.27207e-02, -9.27207e-02,  ..., -9.27207e-02, -9.27207e-02, -9.27207e-02],
        [-2.92358e-04, -2.92358e-04, -2.92358e-04,  ..., -2.92358e-04, -2.92358e-04, -2.92358e-04]], device='cuda:0', dtype=torch.float64)
Minimum probs (c1, c2, bkgd): [1.5e-05, 1.6e-05, 0.845703]
Maximum probs (c1, c2, bkgd): [0.069359, 0.10401, 1.0]
ElogPi_volunteer:  tensor([[[-8.95510e-01, -1.09510e+00, -9.83324e-01, -7.94297e-01],
         [-4.80986e+00, -6.40583e+00, -6.83533e+00, -6.43892e+00],
         [-5.40930e-01, -4.11543e-01, -4.72148e-01, -6.06441e-01]],
        [[-4.06692e+00, -1.56274e+00, -3.80099e+00, -3.14603e+00],
         [-2.56450e+00, -4.13023e+00, -3.28021e+00, -2.56759e+00],
         [-9.99199e-02, -2.57013e-01, -6.29087e-02, -1.28682e-01]],
        [[-8.72290e+00, -6.99068e+00, -8.90781e+00, -8.33677e+00],
         [-8.99104e+00, -1.22792e+01, -1.02727e+01, -9.41265e+00],
         [-2.89365e-04, -9.27455e-04, -1.71892e-04, -3.23269e-04]]], device='cuda:0', dtype=torch.float64)
base_lib:  tensor([2, 2, 2,  ..., 2, 2, 2])
<class 'torch.Tensor'>
<class 'torch.Tensor'>
torch.Size([3, 3, 4])
torch.Size([252000])
tensor([[-5.40930e-01, -5.40930e-01, -5.40930e-01,  ..., -5.40930e-01, -5.40930e-01, -5.40930e-01],
        [-9.99199e-02, -9.99199e-02, -9.99199e-02,  ..., -9.99199e-02, -9.99199e-02, -9.99199e-02],
        [-2.89365e-04, -2.89365e-04, -2.89365e-04,  ..., -2.89365e-04, -2.89365e-04, -2.89365e-04]], device='cuda:0', dtype=torch.float64)
ElogPi_volunteer:  tensor([[[-8.95510e-01, -1.09510e+00, -9.83324e-01, -7.94297e-01],
         [-4.80986e+00, -6.40583e+00, -6.83533e+00, -6.43892e+00],
         [-5.40930e-01, -4.11543e-01, -4.72148e-01, -6.06441e-01]],
        [[-4.06692e+00, -1.56274e+00, -3.80099e+00, -3.14603e+00],
         [-2.56450e+00, -4.13023e+00, -3.28021e+00, -2.56759e+00],
         [-9.99199e-02, -2.57013e-01, -6.29087e-02, -1.28682e-01]],
        [[-8.72290e+00, -6.99068e+00, -8.90781e+00, -8.33677e+00],
         [-8.99104e+00, -1.22792e+01, -1.02727e+01, -9.41265e+00],
         [-2.89365e-04, -9.27455e-04, -1.71892e-04, -3.23269e-04]]], device='cuda:0', dtype=torch.float64)
base_lib:  tensor([2, 2, 2,  ..., 2, 2, 2])
<class 'torch.Tensor'>
<class 'torch.Tensor'>
torch.Size([3, 3, 4])
torch.Size([252000])
tensor([[-0.41154, -0.41154, -0.41154,  ..., -0.41154, -0.41154, -0.41154],
        [-0.25701, -0.25701, -0.25701,  ..., -0.25701, -0.25701, -0.25701],
        [-0.00093, -0.00093, -0.00093,  ..., -0.00093, -0.00093, -0.00093]], device='cuda:0', dtype=torch.float64)
ElogPi_volunteer:  tensor([[[-8.95510e-01, -1.09510e+00, -9.83324e-01, -7.94297e-01],
         [-4.80986e+00, -6.40583e+00, -6.83533e+00, -6.43892e+00],
         [-5.40930e-01, -4.11543e-01, -4.72148e-01, -6.06441e-01]],
        [[-4.06692e+00, -1.56274e+00, -3.80099e+00, -3.14603e+00],
         [-2.56450e+00, -4.13023e+00, -3.28021e+00, -2.56759e+00],
         [-9.99199e-02, -2.57013e-01, -6.29087e-02, -1.28682e-01]],
        [[-8.72290e+00, -6.99068e+00, -8.90781e+00, -8.33677e+00],
         [-8.99104e+00, -1.22792e+01, -1.02727e+01, -9.41265e+00],
         [-2.89365e-04, -9.27455e-04, -1.71892e-04, -3.23269e-04]]], device='cuda:0', dtype=torch.float64)
base_lib:  tensor([2, 2, 2,  ..., 2, 2, 2])
<class 'torch.Tensor'>
<class 'torch.Tensor'>
torch.Size([3, 3, 4])
torch.Size([252000])
tensor([[-4.72148e-01, -4.72148e-01, -4.72148e-01,  ..., -4.72148e-01, -4.72148e-01, -4.72148e-01],
        [-6.29087e-02, -6.29087e-02, -6.29087e-02,  ..., -6.29087e-02, -6.29087e-02, -6.29087e-02],
        [-1.71892e-04, -1.71892e-04, -1.71892e-04,  ..., -1.71892e-04, -1.71892e-04, -1.71892e-04]], device='cuda:0', dtype=torch.float64)
ElogPi_volunteer:  tensor([[[-8.95510e-01, -1.09510e+00, -9.83324e-01, -7.94297e-01],
         [-4.80986e+00, -6.40583e+00, -6.83533e+00, -6.43892e+00],
         [-5.40930e-01, -4.11543e-01, -4.72148e-01, -6.06441e-01]],
        [[-4.06692e+00, -1.56274e+00, -3.80099e+00, -3.14603e+00],
         [-2.56450e+00, -4.13023e+00, -3.28021e+00, -2.56759e+00],
         [-9.99199e-02, -2.57013e-01, -6.29087e-02, -1.28682e-01]],
        [[-8.72290e+00, -6.99068e+00, -8.90781e+00, -8.33677e+00],
         [-8.99104e+00, -1.22792e+01, -1.02727e+01, -9.41265e+00],
         [-2.89365e-04, -9.27455e-04, -1.71892e-04, -3.23269e-04]]], device='cuda:0', dtype=torch.float64)
base_lib:  tensor([2, 2, 2,  ..., 2, 2, 2])
<class 'torch.Tensor'>
<class 'torch.Tensor'>
torch.Size([3, 3, 4])
torch.Size([252000])
tensor([[-6.06441e-01, -6.06441e-01, -6.06441e-01,  ..., -6.06441e-01, -6.06441e-01, -6.06441e-01],
        [-1.28682e-01, -1.28682e-01, -1.28682e-01,  ..., -1.28682e-01, -1.28682e-01, -1.28682e-01],
      1/79     15.6G      0.12   0.08087   0.02777       114       640: 100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 4/4 [00:01<00:00,  2.22it/s]
               Class     Images     Labels          P          R     mAP@.5 mAP@.5:.95:   0%|          | 0/2 [00:00<?, ?it/s]
               Class     Images     Labels          P          R     mAP@.5 mAP@.5:.95: 100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 2/2 [00:01<00:00,  1.34it/s]
               Class     Images     Labels          P          R     mAP@.5 mAP@.5:.95: 100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 4/4 [00:01<00:00,  2.55it/s]
     Epoch   gpu_mem       box       obj       cls    labels  img_size
YOLO+BCC
      2/79     12.3G    0.1181   0.07582   0.02775       222       640:  25%|â–ˆâ–ˆâ–Œ       | 1/4 [00:00<00:01,  2.07it/s]
                 all         70        961    0.00285     0.0163    0.00134   0.000275
Minimum probs (c1, c2, bkgd): [4e-06, 8e-06, 0.912598]
Maximum probs (c1, c2, bkgd): [0.059065, 0.055255, 1.0]
ElogPi_volunteer:  tensor([[[-9.24090e-01, -1.28588e+00, -7.36794e-01, -9.26232e-01],
         [-5.62078e+00, -6.31559e+00, -6.14177e+00, -6.15902e+00],
         [-5.16654e-01, -3.30043e-01, -6.61092e-01, -5.12612e-01]],
        [[-4.70063e+00, -1.72295e+00, -3.94229e+00, -3.81340e+00],
         [-2.45343e+00, -3.80739e+00, -2.26135e+00, -2.36858e+00],
         [-1.02454e-01, -2.26968e-01, -1.34583e-01, -1.25556e-01]],
        [[-9.01108e+00, -7.36670e+00, -8.86087e+00, -8.89795e+00],
         [-9.57844e+00, -1.30056e+01, -1.01281e+01, -9.75215e+00],
         [-1.95239e-04, -6.38138e-04, -1.85750e-04, -1.98822e-04]]], device='cuda:0', dtype=torch.float64)
base_lib:  tensor([2, 2, 2,  ..., 2, 2, 2])
<class 'torch.Tensor'>
<class 'torch.Tensor'>
torch.Size([3, 3, 4])
torch.Size([504000])
tensor([[-5.16654e-01, -5.16654e-01, -5.16654e-01,  ..., -5.16654e-01, -5.16654e-01, -5.16654e-01],
        [-1.02454e-01, -1.02454e-01, -1.02454e-01,  ..., -1.02454e-01, -1.02454e-01, -1.02454e-01],
        [-1.95239e-04, -1.95239e-04, -1.95239e-04,  ..., -1.95239e-04, -1.95239e-04, -1.95239e-04]], device='cuda:0', dtype=torch.float64)
ElogPi_volunteer:  tensor([[[-9.24090e-01, -1.28588e+00, -7.36794e-01, -9.26232e-01],
         [-5.62078e+00, -6.31559e+00, -6.14177e+00, -6.15902e+00],
         [-5.16654e-01, -3.30043e-01, -6.61092e-01, -5.12612e-01]],
        [[-4.70063e+00, -1.72295e+00, -3.94229e+00, -3.81340e+00],
         [-2.45343e+00, -3.80739e+00, -2.26135e+00, -2.36858e+00],
         [-1.02454e-01, -2.26968e-01, -1.34583e-01, -1.25556e-01]],
        [[-9.01108e+00, -7.36670e+00, -8.86087e+00, -8.89795e+00],
         [-9.57844e+00, -1.30056e+01, -1.01281e+01, -9.75215e+00],
         [-1.95239e-04, -6.38138e-04, -1.85750e-04, -1.98822e-04]]], device='cuda:0', dtype=torch.float64)
base_lib:  tensor([2, 2, 2,  ..., 2, 2, 2])
<class 'torch.Tensor'>
<class 'torch.Tensor'>
torch.Size([3, 3, 4])
torch.Size([504000])
tensor([[-0.33004, -0.33004, -0.33004,  ..., -0.33004, -0.33004, -0.33004],
        [-0.22697, -0.22697, -0.22697,  ..., -0.22697, -0.22697, -0.22697],
        [-0.00064, -0.00064, -0.00064,  ..., -0.00064, -0.00064, -0.00064]], device='cuda:0', dtype=torch.float64)
ElogPi_volunteer:  tensor([[[-9.24090e-01, -1.28588e+00, -7.36794e-01, -9.26232e-01],
         [-5.62078e+00, -6.31559e+00, -6.14177e+00, -6.15902e+00],
         [-5.16654e-01, -3.30043e-01, -6.61092e-01, -5.12612e-01]],
        [[-4.70063e+00, -1.72295e+00, -3.94229e+00, -3.81340e+00],
         [-2.45343e+00, -3.80739e+00, -2.26135e+00, -2.36858e+00],
         [-1.02454e-01, -2.26968e-01, -1.34583e-01, -1.25556e-01]],
        [[-9.01108e+00, -7.36670e+00, -8.86087e+00, -8.89795e+00],
         [-9.57844e+00, -1.30056e+01, -1.01281e+01, -9.75215e+00],
         [-1.95239e-04, -6.38138e-04, -1.85750e-04, -1.98822e-04]]], device='cuda:0', dtype=torch.float64)
base_lib:  tensor([2, 2, 2,  ..., 2, 2, 2])
<class 'torch.Tensor'>
<class 'torch.Tensor'>
torch.Size([3, 3, 4])
torch.Size([504000])
tensor([[-6.61092e-01, -6.61092e-01, -6.61092e-01,  ..., -6.61092e-01, -6.61092e-01, -6.61092e-01],
        [-1.34583e-01, -1.34583e-01, -1.34583e-01,  ..., -1.34583e-01, -1.34583e-01, -1.34583e-01],
        [-1.85750e-04, -1.85750e-04, -1.85750e-04,  ..., -1.85750e-04, -1.85750e-04, -1.85750e-04]], device='cuda:0', dtype=torch.float64)
ElogPi_volunteer:  tensor([[[-9.24090e-01, -1.28588e+00, -7.36794e-01, -9.26232e-01],
         [-5.62078e+00, -6.31559e+00, -6.14177e+00, -6.15902e+00],
         [-5.16654e-01, -3.30043e-01, -6.61092e-01, -5.12612e-01]],
        [[-4.70063e+00, -1.72295e+00, -3.94229e+00, -3.81340e+00],
         [-2.45343e+00, -3.80739e+00, -2.26135e+00, -2.36858e+00],
         [-1.02454e-01, -2.26968e-01, -1.34583e-01, -1.25556e-01]],
        [[-9.01108e+00, -7.36670e+00, -8.86087e+00, -8.89795e+00],
         [-9.57844e+00, -1.30056e+01, -1.01281e+01, -9.75215e+00],
         [-1.95239e-04, -6.38138e-04, -1.85750e-04, -1.98822e-04]]], device='cuda:0', dtype=torch.float64)
base_lib:  tensor([2, 2, 2,  ..., 2, 2, 2])
<class 'torch.Tensor'>
<class 'torch.Tensor'>
torch.Size([3, 3, 4])
torch.Size([504000])
tensor([[-5.12612e-01, -5.12612e-01, -5.12612e-01,  ..., -5.12612e-01, -5.12612e-01, -5.12612e-01],
        [-1.25556e-01, -1.25556e-01, -1.25556e-01,  ..., -1.25556e-01, -1.25556e-01, -1.25556e-01],
        [-1.98822e-04, -1.98822e-04, -1.98822e-04,  ..., -1.98822e-04, -1.98822e-04, -1.98822e-04]], device='cuda:0', dtype=torch.float64)
Minimum probs (c1, c2, bkgd): [2e-06, 8e-06, 0.866211]
Maximum probs (c1, c2, bkgd): [0.102329, 0.081521, 1.0]
ElogPi_volunteer:  tensor([[[-8.74772e-01, -1.43027e+00, -9.74392e-01, -7.38205e-01],
         [-5.04521e+00, -4.82636e+00, -7.08043e+00, -7.14151e+00],
         [-5.52730e-01, -2.85666e-01, -4.77122e-01, -6.53790e-01]],
        [[-4.32372e+00, -2.03365e+00, -4.28404e+00, -3.48088e+00],
         [-2.63089e+00, -2.66427e+00, -4.01768e+00, -4.10032e+00],
         [-9.06063e-02, -2.25485e-01, -3.36980e-02, -4.99317e-02]],
        [[-8.66773e+00, -7.83843e+00, -8.96758e+00, -8.47118e+00],
         [-9.61150e+00, -1.11669e+01, -1.13695e+01, -1.11976e+01],
         [-2.41019e-04, -4.10483e-04, -1.41004e-04, -2.25128e-04]]], device='cuda:0', dtype=torch.float64)
base_lib:  tensor([2, 2, 2,  ..., 2, 2, 2])
<class 'torch.Tensor'>
<class 'torch.Tensor'>
torch.Size([3, 3, 4])
torch.Size([504000])
tensor([[-5.52730e-01, -5.52730e-01, -5.52730e-01,  ..., -5.52730e-01, -5.52730e-01, -5.52730e-01],
        [-9.06063e-02, -9.06063e-02, -9.06063e-02,  ..., -9.06063e-02, -9.06063e-02, -9.06063e-02],
        [-2.41019e-04, -2.41019e-04, -2.41019e-04,  ..., -2.41019e-04, -2.41019e-04, -2.41019e-04]], device='cuda:0', dtype=torch.float64)
ElogPi_volunteer:  tensor([[[-8.74772e-01, -1.43027e+00, -9.74392e-01, -7.38205e-01],
         [-5.04521e+00, -4.82636e+00, -7.08043e+00, -7.14151e+00],
         [-5.52730e-01, -2.85666e-01, -4.77122e-01, -6.53790e-01]],
        [[-4.32372e+00, -2.03365e+00, -4.28404e+00, -3.48088e+00],
         [-2.63089e+00, -2.66427e+00, -4.01768e+00, -4.10032e+00],
         [-9.06063e-02, -2.25485e-01, -3.36980e-02, -4.99317e-02]],
        [[-8.66773e+00, -7.83843e+00, -8.96758e+00, -8.47118e+00],
         [-9.61150e+00, -1.11669e+01, -1.13695e+01, -1.11976e+01],
         [-2.41019e-04, -4.10483e-04, -1.41004e-04, -2.25128e-04]]], device='cuda:0', dtype=torch.float64)
base_lib:  tensor([2, 2, 2,  ..., 2, 2, 2])
<class 'torch.Tensor'>
<class 'torch.Tensor'>
torch.Size([3, 3, 4])
torch.Size([504000])
tensor([[-0.28567, -0.28567, -0.28567,  ..., -0.28567, -0.28567, -0.28567],
        [-0.22548, -0.22548, -0.22548,  ..., -0.22548, -0.22548, -0.22548],
        [-0.00041, -0.00041, -0.00041,  ..., -0.00041, -0.00041, -0.00041]], device='cuda:0', dtype=torch.float64)
ElogPi_volunteer:  tensor([[[-8.74772e-01, -1.43027e+00, -9.74392e-01, -7.38205e-01],
         [-5.04521e+00, -4.82636e+00, -7.08043e+00, -7.14151e+00],
         [-5.52730e-01, -2.85666e-01, -4.77122e-01, -6.53790e-01]],
        [[-4.32372e+00, -2.03365e+00, -4.28404e+00, -3.48088e+00],
         [-2.63089e+00, -2.66427e+00, -4.01768e+00, -4.10032e+00],
         [-9.06063e-02, -2.25485e-01, -3.36980e-02, -4.99317e-02]],
        [[-8.66773e+00, -7.83843e+00, -8.96758e+00, -8.47118e+00],
         [-9.61150e+00, -1.11669e+01, -1.13695e+01, -1.11976e+01],
         [-2.41019e-04, -4.10483e-04, -1.41004e-04, -2.25128e-04]]], device='cuda:0', dtype=torch.float64)
base_lib:  tensor([2, 2, 2,  ..., 2, 2, 2])
<class 'torch.Tensor'>
<class 'torch.Tensor'>
torch.Size([3, 3, 4])
torch.Size([504000])
tensor([[-4.77122e-01, -4.77122e-01, -4.77122e-01,  ..., -4.77122e-01, -4.77122e-01, -4.77122e-01],
        [-3.36980e-02, -3.36980e-02, -3.36980e-02,  ..., -3.36980e-02, -3.36980e-02, -3.36980e-02],
        [-1.41004e-04, -1.41004e-04, -1.41004e-04,  ..., -1.41004e-04, -1.41004e-04, -1.41004e-04]], device='cuda:0', dtype=torch.float64)
ElogPi_volunteer:  tensor([[[-8.74772e-01, -1.43027e+00, -9.74392e-01, -7.38205e-01],
         [-5.04521e+00, -4.82636e+00, -7.08043e+00, -7.14151e+00],
         [-5.52730e-01, -2.85666e-01, -4.77122e-01, -6.53790e-01]],
        [[-4.32372e+00, -2.03365e+00, -4.28404e+00, -3.48088e+00],
         [-2.63089e+00, -2.66427e+00, -4.01768e+00, -4.10032e+00],
         [-9.06063e-02, -2.25485e-01, -3.36980e-02, -4.99317e-02]],
        [[-8.66773e+00, -7.83843e+00, -8.96758e+00, -8.47118e+00],
         [-9.61150e+00, -1.11669e+01, -1.13695e+01, -1.11976e+01],
         [-2.41019e-04, -4.10483e-04, -1.41004e-04, -2.25128e-04]]], device='cuda:0', dtype=torch.float64)
base_lib:  tensor([2, 2, 2,  ..., 2, 2, 2])
<class 'torch.Tensor'>
<class 'torch.Tensor'>
      2/79     15.6G    0.1162    0.0896   0.02778       114       640: 100%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆâ–ˆ| 4/4 [00:01<00:00,  2.25it/s]
               Class     Images     Labels          P          R     mAP@.5 mAP@.5:.95:  50%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆ     | 1/2 [00:00<00:00,  1.77it/s]
torch.Size([504000])
tensor([[-6.53790e-01, -6.53790e-01, -6.53790e-01,  ..., -6.53790e-01, -6.53790e-01, -6.53790e-01],
        [-4.99317e-02, -4.99317e-02, -4.99317e-02,  ..., -4.99317e-02, -4.99317e-02, -4.99317e-02],
        [-2.25128e-04, -2.25128e-04, -2.25128e-04,  ..., -2.25128e-04, -2.25128e-04, -2.25128e-04]], device='cuda:0', dtype=torch.float64)
Minimum probs (c1, c2, bkgd): [1.1e-05, 4e-06, 0.823242]
Maximum probs (c1, c2, bkgd): [0.140903, 0.067038, 1.0]
ElogPi_volunteer:  tensor([[[-8.13556e-01, -1.07082e+00, -9.04805e-01, -5.95815e-01],
         [-4.60756e+00, -7.02858e+00, -7.42350e+00, -7.14659e+00],
         [-6.05471e-01, -4.22369e-01, -5.21040e-01, -8.04729e-01]],
        [[-4.69689e+00, -1.52718e+00, -4.25586e+00, -3.43915e+00],
         [-2.46187e+00, -4.06039e+00, -3.69046e+00, -3.31956e+00],
         [-1.00375e-01, -2.68526e-01, -4.10770e-02, -7.18901e-02]],
        [[-8.68910e+00, -7.25176e+00, -8.57800e+00, -8.14226e+00],
         [-9.06591e+00, -1.19768e+01, -1.14186e+01, -1.05470e+01],
         [-2.85980e-04, -7.17437e-04, -2.01187e-04, -3.19288e-04]]], device='cuda:0', dtype=torch.float64)
base_lib:  tensor([2, 2, 2,  ..., 2, 2, 2])
<class 'torch.Tensor'>
<class 'torch.Tensor'>
torch.Size([3, 3, 4])
torch.Size([504000])
tensor([[-6.05471e-01, -6.05471e-01, -6.05471e-01,  ..., -6.05471e-01, -6.05471e-01, -6.05471e-01],
        [-1.00375e-01, -1.00375e-01, -1.00375e-01,  ..., -1.00375e-01, -1.00375e-01, -1.00375e-01],
        [-2.85980e-04, -2.85980e-04, -2.85980e-04,  ..., -2.85980e-04, -2.85980e-04, -2.85980e-04]], device='cuda:0', dtype=torch.float64)
ElogPi_volunteer:  tensor([[[-8.13556e-01, -1.07082e+00, -9.04805e-01, -5.95815e-01],
         [-4.60756e+00, -7.02858e+00, -7.42350e+00, -7.14659e+00],
         [-6.05471e-01, -4.22369e-01, -5.21040e-01, -8.04729e-01]],
        [[-4.69689e+00, -1.52718e+00, -4.25586e+00, -3.43915e+00],
         [-2.46187e+00, -4.06039e+00, -3.69046e+00, -3.31956e+00],
         [-1.00375e-01, -2.68526e-01, -4.10770e-02, -7.18901e-02]],
        [[-8.68910e+00, -7.25176e+00, -8.57800e+00, -8.14226e+00],
         [-9.06591e+00, -1.19768e+01, -1.14186e+01, -1.05470e+01],
         [-2.85980e-04, -7.17437e-04, -2.01187e-04, -3.19288e-04]]], device='cuda:0', dtype=torch.float64)
base_lib:  tensor([2, 2, 2,  ..., 2, 2, 2])
<class 'torch.Tensor'>
<class 'torch.Tensor'>
torch.Size([3, 3, 4])
torch.Size([504000])
tensor([[-0.42237, -0.42237, -0.42237,  ..., -0.42237, -0.42237, -0.42237],
        [-0.26853, -0.26853, -0.26853,  ..., -0.26853, -0.26853, -0.26853],
        [-0.00072, -0.00072, -0.00072,  ..., -0.00072, -0.00072, -0.00072]], device='cuda:0', dtype=torch.float64)
ElogPi_volunteer:  tensor([[[-8.13556e-01, -1.07082e+00, -9.04805e-01, -5.95815e-01],
         [-4.60756e+00, -7.02858e+00, -7.42350e+00, -7.14659e+00],
         [-6.05471e-01, -4.22369e-01, -5.21040e-01, -8.04729e-01]],
        [[-4.69689e+00, -1.52718e+00, -4.25586e+00, -3.43915e+00],
         [-2.46187e+00, -4.06039e+00, -3.69046e+00, -3.31956e+00],
         [-1.00375e-01, -2.68526e-01, -4.10770e-02, -7.18901e-02]],
        [[-8.68910e+00, -7.25176e+00, -8.57800e+00, -8.14226e+00],
         [-9.06591e+00, -1.19768e+01, -1.14186e+01, -1.05470e+01],
         [-2.85980e-04, -7.17437e-04, -2.01187e-04, -3.19288e-04]]], device='cuda:0', dtype=torch.float64)
base_lib:  tensor([2, 2, 2,  ..., 2, 2, 2])
<class 'torch.Tensor'>
<class 'torch.Tensor'>
torch.Size([3, 3, 4])
torch.Size([504000])
tensor([[-5.21040e-01, -5.21040e-01, -5.21040e-01,  ..., -5.21040e-01, -5.21040e-01, -5.21040e-01],
        [-4.10770e-02, -4.10770e-02, -4.10770e-02,  ..., -4.10770e-02, -4.10770e-02, -4.10770e-02],
        [-2.01187e-04, -2.01187e-04, -2.01187e-04,  ..., -2.01187e-04, -2.01187e-04, -2.01187e-04]], device='cuda:0', dtype=torch.float64)
ElogPi_volunteer:  tensor([[[-8.13556e-01, -1.07082e+00, -9.04805e-01, -5.95815e-01],
         [-4.60756e+00, -7.02858e+00, -7.42350e+00, -7.14659e+00],
         [-6.05471e-01, -4.22369e-01, -5.21040e-01, -8.04729e-01]],
        [[-4.69689e+00, -1.52718e+00, -4.25586e+00, -3.43915e+00],
         [-2.46187e+00, -4.06039e+00, -3.69046e+00, -3.31956e+00],
         [-1.00375e-01, -2.68526e-01, -4.10770e-02, -7.18901e-02]],
        [[-8.68910e+00, -7.25176e+00, -8.57800e+00, -8.14226e+00],
         [-9.06591e+00, -1.19768e+01, -1.14186e+01, -1.05470e+01],
         [-2.85980e-04, -7.17437e-04, -2.01187e-04, -3.19288e-04]]], device='cuda:0', dtype=torch.float64)
base_lib:  tensor([2, 2, 2,  ..., 2, 2, 2])
<class 'torch.Tensor'>
<class 'torch.Tensor'>
torch.Size([3, 3, 4])
torch.Size([504000])
tensor([[-8.04729e-01, -8.04729e-01, -8.04729e-01,  ..., -8.04729e-01, -8.04729e-01, -8.04729e-01],
        [-7.18901e-02, -7.18901e-02, -7.18901e-02,  ..., -7.18901e-02, -7.18901e-02, -7.18901e-02],
        [-3.19288e-04, -3.19288e-04, -3.19288e-04,  ..., -3.19288e-04, -3.19288e-04, -3.19288e-04]], device='cuda:0', dtype=torch.float64)
Minimum probs (c1, c2, bkgd): [7e-06, 1.7e-05, 0.831055]
Maximum probs (c1, c2, bkgd): [0.077762, 0.11204, 1.0]
ElogPi_volunteer:  tensor([[[-8.29061e-01, -1.11806e+00, -9.09456e-01, -7.24336e-01],
         [-4.87799e+00, -6.49428e+00, -6.87460e+00, -6.60773e+00],
         [-5.89506e-01, -4.00058e-01, -5.19279e-01, -6.68031e-01]],
        [[-5.00957e+00, -1.31954e+00, -4.57501e+00, -3.46710e+00],
         [-2.47696e+00, -4.07680e+00, -3.25030e+00, -2.52729e+00],
         [-9.61835e-02, -3.35829e-01, -5.14001e-02, -1.18917e-01]],
        [[-8.60550e+00, -7.04970e+00, -8.77452e+00, -8.24934e+00],
         [-9.04927e+00, -1.23443e+01, -1.02624e+01, -9.42093e+00],
         [-3.02608e-04, -8.74362e-04, -1.91548e-04, -3.44490e-04]]], device='cuda:0', dtype=torch.float64)
base_lib:  tensor([2, 2, 2,  ..., 2, 2, 2])
<class 'torch.Tensor'>
<class 'torch.Tensor'>
torch.Size([3, 3, 4])
torch.Size([252000])
tensor([[-5.89506e-01, -5.89506e-01, -5.89506e-01,  ..., -5.89506e-01, -5.89506e-01, -5.89506e-01],
        [-9.61835e-02, -9.61835e-02, -9.61835e-02,  ..., -9.61835e-02, -9.61835e-02, -9.61835e-02],
        [-3.02608e-04, -3.02608e-04, -3.02608e-04,  ..., -3.02608e-04, -3.02608e-04, -3.02608e-04]], device='cuda:0', dtype=torch.float64)
ElogPi_volunteer:  tensor([[[-8.29061e-01, -1.11806e+00, -9.09456e-01, -7.24336e-01],
         [-4.87799e+00, -6.49428e+00, -6.87460e+00, -6.60773e+00],
         [-5.89506e-01, -4.00058e-01, -5.19279e-01, -6.68031e-01]],
        [[-5.00957e+00, -1.31954e+00, -4.57501e+00, -3.46710e+00],
         [-2.47696e+00, -4.07680e+00, -3.25030e+00, -2.52729e+00],
         [-9.61835e-02, -3.35829e-01, -5.14001e-02, -1.18917e-01]],
        [[-8.60550e+00, -7.04970e+00, -8.77452e+00, -8.24934e+00],
         [-9.04927e+00, -1.23443e+01, -1.02624e+01, -9.42093e+00],
         [-3.02608e-04, -8.74362e-04, -1.91548e-04, -3.44490e-04]]], device='cuda:0', dtype=torch.float64)
base_lib:  tensor([2, 2, 2,  ..., 2, 2, 2])
<class 'torch.Tensor'>
<class 'torch.Tensor'>
torch.Size([3, 3, 4])
torch.Size([252000])
tensor([[-0.40006, -0.40006, -0.40006,  ..., -0.40006, -0.40006, -0.40006],
        [-0.33583, -0.33583, -0.33583,  ..., -0.33583, -0.33583, -0.33583],
        [-0.00087, -0.00087, -0.00087,  ..., -0.00087, -0.00087, -0.00087]], device='cuda:0', dtype=torch.float64)
ElogPi_volunteer:  tensor([[[-8.29061e-01, -1.11806e+00, -9.09456e-01, -7.24336e-01],
         [-4.87799e+00, -6.49428e+00, -6.87460e+00, -6.60773e+00],
         [-5.89506e-01, -4.00058e-01, -5.19279e-01, -6.68031e-01]],
        [[-5.00957e+00, -1.31954e+00, -4.57501e+00, -3.46710e+00],
         [-2.47696e+00, -4.07680e+00, -3.25030e+00, -2.52729e+00],
         [-9.61835e-02, -3.35829e-01, -5.14001e-02, -1.18917e-01]],
        [[-8.60550e+00, -7.04970e+00, -8.77452e+00, -8.24934e+00],
         [-9.04927e+00, -1.23443e+01, -1.02624e+01, -9.42093e+00],
         [-3.02608e-04, -8.74362e-04, -1.91548e-04, -3.44490e-04]]], device='cuda:0', dtype=torch.float64)
base_lib:  tensor([2, 2, 2,  ..., 2, 2, 2])
<class 'torch.Tensor'>
<class 'torch.Tensor'>
torch.Size([3, 3, 4])
torch.Size([252000])
tensor([[-5.19279e-01, -5.19279e-01, -5.19279e-01,  ..., -5.19279e-01, -5.19279e-01, -5.19279e-01],
        [-5.14001e-02, -5.14001e-02, -5.14001e-02,  ..., -5.14001e-02, -5.14001e-02, -5.14001e-02],
        [-1.91548e-04, -1.91548e-04, -1.91548e-04,  ..., -1.91548e-04, -1.91548e-04, -1.91548e-04]], device='cuda:0', dtype=torch.float64)
ElogPi_volunteer:  tensor([[[-8.29061e-01, -1.11806e+00, -9.09456e-01, -7.24336e-01],
         [-4.87799e+00, -6.49428e+00, -6.87460e+00, -6.60773e+00],
         [-5.89506e-01, -4.00058e-01, -5.19279e-01, -6.68031e-01]],
        [[-5.00957e+00, -1.31954e+00, -4.57501e+00, -3.46710e+00],
         [-2.47696e+00, -4.07680e+00, -3.25030e+00, -2.52729e+00],
         [-9.61835e-02, -3.35829e-01, -5.14001e-02, -1.18917e-01]],
        [[-8.60550e+00, -7.04970e+00, -8.77452e+00, -8.24934e+00],
         [-9.04927e+00, -1.23443e+01, -1.02624e+01, -9.42093e+00],
         [-3.02608e-04, -8.74362e-04, -1.91548e-04, -3.44490e-04]]], device='cuda:0', dtype=torch.float64)
base_lib:  tensor([2, 2, 2,  ..., 2, 2, 2])
<class 'torch.Tensor'>
<class 'torch.Tensor'>
torch.Size([3, 3, 4])
torch.Size([252000])
tensor([[-6.68031e-01, -6.68031e-01, -6.68031e-01,  ..., -6.68031e-01, -6.68031e-01, -6.68031e-01],
        [-1.18917e-01, -1.18917e-01, -1.18917e-01,  ..., -1.18917e-01, -1.18917e-01, -1.18917e-01],

               Class     Images     Labels          P          R     mAP@.5 mAP@.5:.95:  50%|â–ˆâ–ˆâ–ˆâ–ˆâ–ˆ     | 1/2 [00:01<00:01,  1.30s/it]